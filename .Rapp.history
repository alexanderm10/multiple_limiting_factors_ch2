summary(core.data)
other.core$canopy.class <- as.factor(other.core$canopy.class)
summary(other.core)
summary(core.data)
#---------------------------------#
# loading in Niwot tree data#
#
niwot.tree.data <- read.csv("raw_input_files/niwot_tree_metadata.csv", header=T)#
#
summary(niwot.tree.data)#
#
# Loading in Niwot core data#
niwot.core.data <- read.csv("raw_input_files/niwot_core_metadata.csv", header=T)#
summary(niwot.core.data)#
#---------------------------------#
# Loading in Harvard/Howland data#
# Tree data#
harv.tree.data <- read.csv("raw_input_files/harvard_howland_tree_metadata.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#
summary(harv.tree.data)#
# Core Data#
harv.core.data <- read.csv("raw_input_files/harvard_how.and_core_data2.csv", header=T)#
harv.core.data <- harv.core.data[,2:ncol(harv.core.data)]#
summary(harv.core.data)#
#
# merging core.data together#
summary(niwot.core.data)#
summary(harv.core.data)#
#
other.core <- merge(niwot.core.data, harv.core.data, all.x=T, all.y=T)#
summary(other.core)
other.core$canopy.class <- as.factor(other.core$canopy.class)
summary(other.core)
summary(core.data)
core.data2 <- merge(core.data, other.core, all.x=T, all.y=T)
summary(core.data2)
core.data2$pith.present <- recode(core.data2$pith.present, "'B' = 'N'")
libary(car)
library(car)
core.data2$pith.present <- recode(core.data2$pith.present, "'B' = 'N'")
summary(core.data2)
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
##################################################################################################
# Loading up .csv file that has meta data and RWL files for ring widths#
# Also doing some housekeeping (unit conversions, name formats) up front to make the workflow smoother#
##################################################################################################
#
#load in core details data sheet.  Has living/dead, pith info, measurement info.#
#loading the dplR to use the basal area reconstruction functions.#
core.data <- read.csv("raw_input_files/Core_data_01202014.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
#adding a column include which plot at the site the trees belong to#
names(core.data)#
core.data$plot <- substr(core.data$plot.id, 3, 3)#
core.data$plot <- as.factor(core.data$plot)#
unique(core.data$pith.yr)#
summary(core.data)#
#
# Doing some stuff to Canopy Class to make our lives easier#
#   1) Assume all Valles & Niwot trees are co-dominant#
#   2) give all dead trees without an existing canopy class a "SNAG" class#
core.data$canopy.class <- as.factor(ifelse(core.data$live.dead=="DEAD" & is.na(core.data$canopy.class), "SNAG", #
									ifelse(substr(core.data$TreeID,1,1)=="V" | substr(core.data$TreeID,1,1)=="N", "C", #
									paste(core.data$canopy.class)))) # Make a dead canopy class)#
summary(core.data)#
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)#
#
#importing the diameter files of all trees sampled: includes tree id, spp, plot assignment, and DBH #
tree.data <- read.csv("raw_input_files/tree_metadata_DOE_plus_valles.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#adding a column include which plot at the site the trees belong to#
names(tree.data)#
tree.data$plot <- substr(tree.data$PlotID, 3, 3)#
tree.data$plot <- as.factor(tree.data$plot)#
summary(tree.data)#
#
# Doing some stuff to Canopy Class to make our lives easier#
#   1) Assume all Valles & Niwot trees are co-dominant#
#   2) give all dead trees without an existing canopy class a "SNAG" class#
tree.data$Canopy.Class <- as.factor(ifelse(tree.data$Live.Dead=="DEAD" & is.na(tree.data$Canopy.Class), "SNAG", #
									ifelse(substr(tree.data$TreeID,1,1)=="V" | substr(tree.data$TreeID,1,1)=="N", "C", #
									paste(tree.data$Canopy.Class)))) # Make a dead canopy class)#
summary(tree.data)#
#
#---------------------------------#
# loading in Niwot tree data#
#
niwot.tree.data <- read.csv("raw_input_files/niwot_tree_metadata.csv", header=T)#
#
summary(niwot.tree.data)#
#
# Loading in Niwot core data#
niwot.core.data <- read.csv("raw_input_files/niwot_core_metadata.csv", header=T)#
summary(niwot.core.data)#
#---------------------------------#
# Loading in Harvard/Howland data#
# Tree data#
harv.tree.data <- read.csv("raw_input_files/harvard_howland_tree_metadata.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#
summary(harv.tree.data)#
# Core Data#
harv.core.data <- read.csv("raw_input_files/harvard_how.and_core_data2.csv", header=T)#
harv.core.data <- harv.core.data[,2:ncol(harv.core.data)]#
summary(harv.core.data)#
#
# merging core.data together#
summary(niwot.core.data)#
summary(harv.core.data)#
#
other.core <- merge(niwot.core.data, harv.core.data, all.x=T, all.y=T)#
summary(other.core)#
other.core$canopy.class <- as.factor(other.core$canopy.class)#
#
summary(core.data)
core.data2 <- merge(core.data, other.core, all.x=T, all.y=T)
summary(core.data2)
summary(other.core)
summary(core.data)
other.core$dbh <- other.core$DBH..cm.
summary(core.data)
core.data2 <- merge(core.data, other.core, all.x=T, all.y=T)
summary(core.data2)
core.data2$pith.present <- recode(core.data2$pith.present, "'B' = 'N'")
core.data2
summary(core.data2)
write.csv(core.data2, "processed_data/all_sites_core_data.csv", row.names=F)
summary(harv.tree.data)
summary(niwot.tree.data)
summary(tree.data)
other.tree <- merge(harv.tree.data, niwot.tree.data, all.x=T, all.y=T)
summary(other.tree)
tree.data2 <- merge(other.tree, tree.data, all.x=T, all.y=T)
summary(tree.data2)
t.mean <- read.csv("climate_data/prism_met_sites_wide_tmean.csv", header=T)#
t.min <- read.csv("climate_data/prism_met_sites_wide_tmin.csv", header=T)#
t.max <- read.csv("climate_data/prism_met_sites_wide_tmax.csv", header=T)#
precip <- read.csv("climate_data/prism_met_sites_wide_ppt.csv", header=T)
summary(t.mean)
harv1.tmean <- t.mean[t.mean$Site.Name=="Harvard Forest (Tower Plot 1)",]
harv2.tmean <- t.mean[t.mean$Site.Name=="Harvard Forest (Tower Plot 2)",]
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
##################################################################################################
# Loading up .csv file that has meta data and RWL files for ring widths#
# Also doing some housekeeping (unit conversions, name formats) up front to make the workflow smoother#
##################################################################################################
#
#load in core details data sheet.  Has living/dead, pith info, measurement info.#
#loading the dplR to use the basal area reconstruction functions.#
core.data <- read.csv("raw_input_files/Core_data_01202014.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
#adding a column include which plot at the site the trees belong to#
names(core.data)#
core.data$plot <- substr(core.data$plot.id, 3, 3)#
core.data$plot <- as.factor(core.data$plot)#
unique(core.data$pith.yr)#
summary(core.data)#
#
# Doing some stuff to Canopy Class to make our lives easier#
#   1) Assume all Valles & Niwot trees are co-dominant#
#   2) give all dead trees without an existing canopy class a "SNAG" class#
core.data$canopy.class <- as.factor(ifelse(core.data$live.dead=="DEAD" & is.na(core.data$canopy.class), "SNAG", #
									ifelse(substr(core.data$TreeID,1,1)=="V" | substr(core.data$TreeID,1,1)=="N", "C", #
									paste(core.data$canopy.class)))) # Make a dead canopy class)#
summary(core.data)#
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)#
#
#importing the diameter files of all trees sampled: includes tree id, spp, plot assignment, and DBH #
tree.data <- read.csv("raw_input_files/tree_metadata_DOE_plus_valles.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#adding a column include which plot at the site the trees belong to#
names(tree.data)#
tree.data$plot <- substr(tree.data$PlotID, 3, 3)#
tree.data$plot <- as.factor(tree.data$plot)#
summary(tree.data)#
#
# Doing some stuff to Canopy Class to make our lives easier#
#   1) Assume all Valles & Niwot trees are co-dominant#
#   2) give all dead trees without an existing canopy class a "SNAG" class#
tree.data$Canopy.Class <- as.factor(ifelse(tree.data$Live.Dead=="DEAD" & is.na(tree.data$Canopy.Class), "SNAG", #
									ifelse(substr(tree.data$TreeID,1,1)=="V" | substr(tree.data$TreeID,1,1)=="N", "C", #
									paste(tree.data$Canopy.Class)))) # Make a dead canopy class)#
summary(tree.data)#
#
#---------------------------------#
# loading in Niwot tree data#
#
niwot.tree.data <- read.csv("raw_input_files/niwot_tree_metadata.csv", header=T)#
#
summary(niwot.tree.data)#
#
# Loading in Niwot core data#
niwot.core.data <- read.csv("raw_input_files/niwot_core_metadata.csv", header=T)#
summary(niwot.core.data)#
#---------------------------------#
# Loading in Harvard/Howland data#
# Tree data#
harv.tree.data <- read.csv("raw_input_files/harvard_howland_tree_metadata.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#
summary(harv.tree.data)#
# Core Data#
harv.core.data <- read.csv("raw_input_files/harvard_how.and_core_data2.csv", header=T)#
harv.core.data <- harv.core.data[,2:ncol(harv.core.data)]#
summary(harv.core.data)#
#
# merging core.data together#
summary(niwot.core.data)#
summary(harv.core.data)#
#
other.core <- merge(niwot.core.data, harv.core.data, all.x=T, all.y=T)#
summary(other.core)#
other.core$canopy.class <- as.factor(other.core$canopy.class)#
other.core$dbh <- other.core$DBH..cm.#
#
summary(core.data)#
#
core.data2 <- merge(core.data, other.core, all.x=T, all.y=T)#
summary(core.data2)#
core.data2$pith.present <- recode(core.data2$pith.present, "'B' = 'N'")#
summary(core.data2)#
#
write.csv(core.data2, "processed_data/all_sites_core_data.csv", row.names=F)#
#
# Tree Data#
summary(harv.tree.data)#
summary(niwot.tree.data)#
summary(tree.data)#
#
other.tree <- merge(harv.tree.data, niwot.tree.data, all.x=T, all.y=T)#
summary(other.tree)#
#
tree.data2 <- merge(other.tree, tree.data, all.x=T, all.y=T)#
summary(tree.data2)
unique(tree.data2$PlotID)
write.csv(tree.data2, "processed_data/all_sites_tree_data.csv", row.names=F))
write.csv(tree.data2, "processed_data/all_sites_tree_data.csv", row.names=F)
###################################################################
# Importing ring widths#
###################################################################
# Load in Ross DOE ring widths from the east#
# importing ring widths of dated samples #
#
core.rw <- read.rwl("RWL/RWL_all_trees.rwl", format="tucson")#
summary(core.rw)#
#
#removing the extra character that tellervo adds#
names(core.rw)<-substr(names(core.rw), 1, 7)#
names(core.rw)#
#
replace.b <- which(substr(names(core.rw),7,7)=="b") #
names(core.rw)[replace.b] <- paste0(substr(names(core.rw)[replace.b], 1,6), "B")#
#
replace.a <- which(substr(names(core.rw),7,7)=="a") #
names(core.rw)[replace.a] <- paste0(substr(names(core.rw)[replace.a], 1,6), "A")#
names(core.rw) #
#---------------------------------#
# Load in Niwot RW#
#
niwot.rw <- read.csv("RWL/niwot_rw.csv", header=T)#
#
#---------------------------------#
# Load in harvard/howland trees#
#
harv.rw <- read.rwl("RWL/harv_how_all_trees.rwl", format="tucson")#
#
# Merging files together to make one core.rw file#
summary(niwot.rw)#
summary(harv.rw)#
#
harv.rw <- as.data.frame(harv.rw)#
summary(harv.rw)#
row.names(harv.rw)#
harv.rw$Year <- as.numeric(row.names(harv.rw))#
#
other.rw <- merge(niwot.rw, harv.rw, all.x=T, all.y=T)#
summary(other.rw)#
names(other.rw)#
dim(other.rw)#
#
summary(core.rw)#
core.rw <- as.data.frame(core.rw)#
names(core.rw)#
core.rw$Year <- as.numeric(row.names(core.rw))#
core.rw2 <- merge(core.rw, other.rw, all.x=T, all.y=T)#
summary(core.rw2)#
#
row.names(core.rw2) <- core.rw2$Year#
dim(core.rw2)
summary(tree.data2)
unique(tree.data2$PlotID)
unique(tree.data2$Site)
summary(core.data2)
dim(core.rw2)
summary(core.rw2)
test <- read.csv("processed_data/DOE_Allsites_TreeRWL_AllSites_stacked.csv", header=T)
summary(test)
summary(t.mean)
unique(t.mean$Site)
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")
t.mean$Site.Name <- ifelse(t.mean$Site.Name %in% harvard, "Harvard Forest", t.mean$Site.Name)
summary(t.mean)
t.mean$Site.Name <- as.factor(ifelse(t.mean$Site.Name %in% harvard, "Harvard Forest", t.mean$Site.Name))
summary(t.mean)
t.mean$Site.Name <- as.factor(ifelse(t.mean$Site.Name %in% harvard, "Harvard Forest", paste(t.mean$Site.Name)))
summary(t.mean)
t.mean <- read.csv("climate_data/prism_met_sites_wide_tmean.csv", header=T)#
t.min <- read.csv("climate_data/prism_met_sites_wide_tmin.csv", header=T)#
t.max <- read.csv("climate_data/prism_met_sites_wide_tmax.csv", header=T)#
precip <- read.csv("climate_data/prism_met_sites_wide_ppt.csv", header=T)#
summary(t.mean)#
#
# We have Harvard P1 and Harvard P2 as separate sites#
#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.mean$Site.Name <- as.factor(ifelse(t.mean$Site.Name %in% harvard, "Harvard Forest", paste(t.mean$Site.Name)))#
summary(t.mean)
t.mean2 <- aggregate(t.mean[,3:ncol(t.mean)], by=t.mean[,c("Site.Name", "Year")], FUN=mean)
summary(t.mean2)
# t.min#
t.min$Site.Name <- as.factor(ifelse(t.min$Site.Name %in% harvard, "Harvard Forest", paste(t.min$Site.Name)))#
summary(t.min)#
#
t.min2 <- aggregate(t.min[,3:ncol(t.min)], by=t.min[,c("Site.Name", "Year")], FUN=min)#
summary(t.min2)
# t.max#
t.max$Site.Name <- as.factor(ifelse(t.max$Site.Name %in% harvard, "Harvard Forest", paste(t.max$Site.Name)))#
summary(t.max)#
#
t.max2 <- aggregate(t.max[,3:ncol(t.max)], by=t.max[,c("Site.Name", "Year")], FUN=max)#
summary(t.max2)
# Precip#
precip$Site.Name <- as.factor(ifelse(precip$Site.Name %in% harvard, "Harvard Forest", paste(precip$Site.Name)))#
summary(precip)#
#
precip2 <- aggregate(precip[,3:ncol(precip)], by=precip[,c("Site.Name", "Year")], FUN=mean)#
summary(precip2)
t.mean.gs <- rowMeans(vuf.tmean[c("May", "Jun", "Jul", "Aug", "Sep")])
tmean2$grow.seas <- rowMeans(t.mean[c("May", "Jun", "Jul", "Aug", "Sep")])
t.mean2$grow.seas <- rowMeans(t.mean[c("May", "Jun", "Jul", "Aug", "Sep")])
t.mean2$grow.seas <- rowMeans(t.mean2[c("May", "Jun", "Jul", "Aug", "Sep")])
t.mean2$grow.seas <- rowMeans(t.mean2[,c("May", "Jun", "Jul", "Aug", "Sep")])
precip2$grow.seas <- rowSums(precip2[,c("May", "Jun", "Jul", "Aug", "Sep")])
climate.use <- data.frame(Site = t.mean2$Site.Name,#
						  tmean = t.mean2$grow.seas,#
						  precip = precip2$grow.ses,#
						  year = t.mean$year)
climate.use <- data.frame(Site = t.mean2$Site.Name,#
						  tmean = t.mean2$grow.seas,#
						  precip = precip2$grow.ses,#
						  year = t.mean2$year)
climate.use <- data.frame(Site = t.mean2$Site.Name,#
						  tmean = t.mean2$grow.seas,#
						  precip = precip2$grow.seas,#
						  year = t.mean2$year)
summary(t.mean2)
climate.use <- data.frame(Site = t.mean2$Site.Name,#
						  tmean = t.mean2$grow.seas,#
						  precip = precip2$grow.seas,#
						  year = t.mean2$Year)
summary(climate.use)
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
##################################################################################################
# Loading up .csv file that has meta data and RWL files for ring widths#
# Also doing some housekeeping (unit conversions, name formats) up front to make the workflow smoother#
##################################################################################################
#
#load in core details data sheet.  Has living/dead, pith info, measurement info.#
#loading the dplR to use the basal area reconstruction functions.#
core.data <- read.csv("raw_input_files/Core_data_01202014.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
#adding a column include which plot at the site the trees belong to#
names(core.data)#
core.data$plot <- substr(core.data$plot.id, 3, 3)#
core.data$plot <- as.factor(core.data$plot)#
unique(core.data$pith.yr)#
summary(core.data)#
#
# Doing some stuff to Canopy Class to make our lives easier#
#   1) Assume all Valles & Niwot trees are co-dominant#
#   2) give all dead trees without an existing canopy class a "SNAG" class#
core.data$canopy.class <- as.factor(ifelse(core.data$live.dead=="DEAD" & is.na(core.data$canopy.class), "SNAG", #
									ifelse(substr(core.data$TreeID,1,1)=="V" | substr(core.data$TreeID,1,1)=="N", "C", #
									paste(core.data$canopy.class)))) # Make a dead canopy class)#
summary(core.data)#
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)#
#
#importing the diameter files of all trees sampled: includes tree id, spp, plot assignment, and DBH #
tree.data <- read.csv("raw_input_files/tree_metadata_DOE_plus_valles.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#adding a column include which plot at the site the trees belong to#
names(tree.data)#
tree.data$plot <- substr(tree.data$PlotID, 3, 3)#
tree.data$plot <- as.factor(tree.data$plot)#
summary(tree.data)#
#
# Doing some stuff to Canopy Class to make our lives easier#
#   1) Assume all Valles & Niwot trees are co-dominant#
#   2) give all dead trees without an existing canopy class a "SNAG" class#
tree.data$Canopy.Class <- as.factor(ifelse(tree.data$Live.Dead=="DEAD" & is.na(tree.data$Canopy.Class), "SNAG", #
									ifelse(substr(tree.data$TreeID,1,1)=="V" | substr(tree.data$TreeID,1,1)=="N", "C", #
									paste(tree.data$Canopy.Class)))) # Make a dead canopy class)#
summary(tree.data)#
#
#---------------------------------#
# loading in Niwot tree data#
#
niwot.tree.data <- read.csv("raw_input_files/niwot_tree_metadata.csv", header=T)#
#
summary(niwot.tree.data)#
#
# Loading in Niwot core data#
niwot.core.data <- read.csv("raw_input_files/niwot_core_metadata.csv", header=T)#
summary(niwot.core.data)#
#---------------------------------#
# Loading in Harvard/Howland data#
# Tree data#
harv.tree.data <- read.csv("raw_input_files/harvard_howland_tree_metadata.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#
summary(harv.tree.data)#
# Core Data#
harv.core.data <- read.csv("raw_input_files/harvard_how.and_core_data2.csv", header=T)#
harv.core.data <- harv.core.data[,2:ncol(harv.core.data)]#
summary(harv.core.data)#
#
# merging core.data together#
summary(niwot.core.data)#
summary(harv.core.data)#
#
other.core <- merge(niwot.core.data, harv.core.data, all.x=T, all.y=T)#
summary(other.core)#
other.core$canopy.class <- as.factor(other.core$canopy.class)#
other.core$dbh <- other.core$DBH..cm.#
#
summary(core.data)#
#
core.data2 <- merge(core.data, other.core, all.x=T, all.y=T)#
summary(core.data2)#
core.data2$pith.present <- recode(core.data2$pith.present, "'B' = 'N'")#
summary(core.data2)#
#
write.csv(core.data2, "processed_data/all_sites_core_data.csv", row.names=F)#
#
# Tree Data#
summary(harv.tree.data)#
summary(niwot.tree.data)#
summary(tree.data)#
#
other.tree <- merge(harv.tree.data, niwot.tree.data, all.x=T, all.y=T)#
summary(other.tree)#
#
tree.data2 <- merge(other.tree, tree.data, all.x=T, all.y=T)#
summary(tree.data2)#
###################################################################
# Importing ring widths#
###################################################################
# Load in Ross DOE ring widths from the east#
# importing ring widths of dated samples #
#
core.rw <- read.rwl("RWL/RWL_all_trees.rwl", format="tucson")#
summary(core.rw)#
#
#removing the extra character that tellervo adds#
names(core.rw)<-substr(names(core.rw), 1, 7)#
names(core.rw)#
#
replace.b <- which(substr(names(core.rw),7,7)=="b") #
names(core.rw)[replace.b] <- paste0(substr(names(core.rw)[replace.b], 1,6), "B")#
#
replace.a <- which(substr(names(core.rw),7,7)=="a") #
names(core.rw)[replace.a] <- paste0(substr(names(core.rw)[replace.a], 1,6), "A")#
names(core.rw) #
#---------------------------------#
# Load in Niwot RW#
#
niwot.rw <- read.csv("RWL/niwot_rw.csv", header=T)#
#
#---------------------------------#
# Load in harvard/howland trees#
#
harv.rw <- read.rwl("RWL/harv_how_all_trees.rwl", format="tucson")#
#
# Merging files together to make one core.rw file#
summary(niwot.rw)#
summary(harv.rw)#
#
harv.rw <- as.data.frame(harv.rw)#
summary(harv.rw)#
row.names(harv.rw)#
harv.rw$Year <- as.numeric(row.names(harv.rw))#
#
other.rw <- merge(niwot.rw, harv.rw, all.x=T, all.y=T)#
summary(other.rw)#
names(other.rw)#
dim(other.rw)#
#
summary(core.rw)#
core.rw <- as.data.frame(core.rw)#
names(core.rw)#
core.rw$Year <- as.numeric(row.names(core.rw))#
core.rw2 <- merge(core.rw, other.rw, all.x=T, all.y=T)#
summary(core.rw2)#
#
row.names(core.rw2) <- core.rw2$Year#
dim(core.rw2)
names(core.rw2)
climate.use <- data.frame(Site = t.mean2$Site.Name,#
						  tmean = t.mean2$grow.seas,#
						  precip = precip2$grow.seas,#
						  Year = t.mean2$Year)
summary(climate.use)
write.csv(climate.use)
write.csv(climate.use, file="processed_data/climate_use.csv")
write.csv(climate.use, file="processed_data/climate_use.csv", row.names=F)
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
##################################################################################################
# Loading up .csv file that has meta data and RWL files for ring widths#
# Also doing some housekeeping (unit conversions, name formats) up front to make the workflow smoother#
##################################################################################################
#
#load in core details data sheet.  Has living/dead, pith info, measurement info.
core.data <- read.csv("raw_input_files/Core_data_01202014.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)
names(core.data)#
core.data$plot <- substr(core.data$plot.id, 3, 3)#
core.data$plot <- as.factor(core.data$plot)#
unique(core.data$pith.yr)#
summary(core.data)
# Doing some stuff to Canopy Class to make our lives easier#
#   1) Assume all Valles & Niwot trees are co-dominant#
#   2) give all dead trees without an existing canopy class a "SNAG" class#
core.data$canopy.class <- as.factor(ifelse(core.data$live.dead=="DEAD" & is.na(core.data$canopy.class), "SNAG", #
									ifelse(substr(core.data$TreeID,1,1)=="V" | substr(core.data$TreeID,1,1)=="N", "C", #
									paste(core.data$canopy.class)))) # Make a dead canopy class)#
summary(core.data)#
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)#
#
#importing the diameter files of all trees sampled: includes tree id, spp, plot assignment, and DBH #
tree.data <- read.csv("raw_input_files/tree_metadata_DOE_plus_valles.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#adding a column include which plot at the site the trees belong to#
names(tree.data)#
tree.data$plot <- substr(tree.data$PlotID, 3, 3)#
tree.data$plot <- as.factor(tree.data$plot)#
summary(tree.data)#
#
# Doing some stuff to Canopy Class to make our lives easier#
#   1) Assume all Valles & Niwot trees are co-dominant#
#   2) give all dead trees without an existing canopy class a "SNAG" class#
tree.data$Canopy.Class <- as.factor(ifelse(tree.data$Live.Dead=="DEAD" & is.na(tree.data$Canopy.Class), "SNAG", #
									ifelse(substr(tree.data$TreeID,1,1)=="V" | substr(tree.data$TreeID,1,1)=="N", "C", #
									paste(tree.data$Canopy.Class)))) # Make a dead canopy class)#
summary(tree.data)#
#
#---------------------------------#
# loading in Niwot tree data#
#
niwot.tree.data <- read.csv("raw_input_files/niwot_tree_metadata.csv", header=T)#
#
summary(niwot.tree.data)#
#
# Loading in Niwot core data#
niwot.core.data <- read.csv("raw_input_files/niwot_core_metadata.csv", header=T)#
summary(niwot.core.data)#
#---------------------------------#
# Loading in Harvard/Howland data#
# Tree data#
harv.tree.data <- read.csv("raw_input_files/harvard_howland_tree_metadata.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#
summary(harv.tree.data)#
# Core Data#
harv.core.data <- read.csv("raw_input_files/harvard_how.and_core_data2.csv", header=T)#
harv.core.data <- harv.core.data[,2:ncol(harv.core.data)]#
summary(harv.core.data)#
#
# merging core.data together#
summary(niwot.core.data)#
summary(harv.core.data)#
#
other.core <- merge(niwot.core.data, harv.core.data, all.x=T, all.y=T)#
summary(other.core)#
other.core$canopy.class <- as.factor(other.core$canopy.class)#
other.core$dbh <- other.core$DBH..cm.#
#
summary(core.data)#
#
core.data2 <- merge(core.data, other.core, all.x=T, all.y=T)#
summary(core.data2)#
core.data2$pith.present <- recode(core.data2$pith.present, "'B' = 'N'")#
summary(core.data2)#
#
write.csv(core.data2, "processed_data/all_sites_core_data.csv", row.names=F)#
#
# Tree Data#
summary(harv.tree.data)#
summary(niwot.tree.data)#
summary(tree.data)#
#
other.tree <- merge(harv.tree.data, niwot.tree.data, all.x=T, all.y=T)#
summary(other.tree)#
#
tree.data2 <- merge(other.tree, tree.data, all.x=T, all.y=T)#
summary(tree.data2)#
###################################################################
# Importing ring widths#
###################################################################
# Load in Ross DOE ring widths from the east#
# importing ring widths of dated samples #
#
core.rw <- read.rwl("RWL/RWL_all_trees.rwl", format="tucson")#
summary(core.rw)#
#
#removing the extra character that tellervo adds#
names(core.rw)<-substr(names(core.rw), 1, 7)#
names(core.rw)#
#
replace.b <- which(substr(names(core.rw),7,7)=="b") #
names(core.rw)[replace.b] <- paste0(substr(names(core.rw)[replace.b], 1,6), "B")#
#
replace.a <- which(substr(names(core.rw),7,7)=="a") #
names(core.rw)[replace.a] <- paste0(substr(names(core.rw)[replace.a], 1,6), "A")#
names(core.rw) #
#---------------------------------#
# Load in Niwot RW#
#
niwot.rw <- read.csv("RWL/niwot_rw.csv", header=T)#
#
#---------------------------------#
# Load in harvard/howland trees#
#
harv.rw <- read.rwl("RWL/harv_how_all_trees.rwl", format="tucson")#
#
# Merging files together to make one core.rw file#
summary(niwot.rw)#
summary(harv.rw)#
#
harv.rw <- as.data.frame(harv.rw)#
summary(harv.rw)#
row.names(harv.rw)#
harv.rw$Year <- as.numeric(row.names(harv.rw))#
#
other.rw <- merge(niwot.rw, harv.rw, all.x=T, all.y=T)#
summary(other.rw)#
names(other.rw)#
dim(other.rw)#
#
summary(core.rw)#
core.rw <- as.data.frame(core.rw)#
names(core.rw)#
core.rw$Year <- as.numeric(row.names(core.rw))#
core.rw2 <- merge(core.rw, other.rw, all.x=T, all.y=T)#
summary(core.rw2)#
#
row.names(core.rw2) <- core.rw2$Year#
dim(core.rw2)#
names(core.rw2)#
write.csv(core.rw2, file="processed_data/DOE_core_rw.csv", row.names=F)
dbh.recon <- read.csv("DOE_Allsites_GapFilling_DBHrecon_ALL.csv", header=T)
getwd()
dbh.recon <- read.csv("processed_data/DOE_Allsites_GapFilling_DBHrecon_ALL.csv", header=T)
summary(dbh.recon)
summary(tree.data)
summary(tree.data2)
summary(core.data2)
summary(tree.data2)
summary(core.data2)
summary(tree.data2)
dated.trees <- data.frame(TreeID = tree.data2$TreeID)
summary(dbh.recon)
summary(tree.data2)
summary(core.data2)
dated.trees <- data.frame(TreeID = tree.data2$TreeID)
summary(dated.trees)
summary(core.data2)
summary(tree.data3)
tree.data <- read.csv("raw_input_files/DOE_AllSitesTreeData.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)
names(tree.data)
summary(tree.data)
core.data <- read.csv("raw_input_files/DOE_AllSites_core_data.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)
summary(core.data)
summary(tree.data)
dbh.recon <- read.csv("processed_data/DOE_Allsites_GapFilling_DBHrecon_ALL.csv", header=T)
summary(dbh.recon)
summary(tree.data)
core.rw <- read.csv("raw_input_files/DOE_AllSites_Gapfilled.csv", header=T)
summary(core.rw)
tree.rw <- read.csv("raw_input_files/DOE_AllSites_Gapfilled.csv", header=T)#
#
summary(tree.rw)
summary(dbh.recon)
dbh.recon.stack <- stack(dbh.recon)
summary(dbh.recon.stack)
max(dbh.recon)
max(dbh.recon, na.rm=T)
which(max(dbh.recon, na.rm=T))
dbh.recon <- dbh.recon[,2:ncol(dbh.recon)]
summary(dbh.recon)
names(dbh.recon)
dbh.recon.stack <- stack(dbh.recon)
summary(dbh.recon.stack)
names(dbh.recon.stack) <- c("dbh.recon", "TreeID")
summary(tree.data)
data.use <- merge(dbh.recon, tree.data, all.x=T, all.x=T)
data.use <- merge(dbh.recon, tree.data, all.x=T, all.y=T)
summary(data.use)
library(mgcv)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)#
summary(data.use)#
#
# reducing the amount of data for the test runs#
#
test <- data.use[data.use$Site=="Harvard" & data.use$Year > 1980,]#
summary(test)#
#
# Get a list of what predictors & responses I'm using#
predictors.all <- c("RW", "tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot")#
#
# Getting rid of observations that have NAs in the important variables#
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]#
#
# Subsetting to a set of species that we have enough data to feel good about#
species.use <- c("TSCA", "QURU", "ACRU", "BEAL")#
test <- test[test$Species %in% species.use,]#
#
summary(test)#
summary(test$Live.Dead)#
summary(test$Canopy.Class)#
# RW <- test$RW#
# temp <- test$tmean#
# precip <- test$precip#
# canopy <- test$Canopy.Class#
# size <- test$DBH..cm.#
# species <- unique(test$Species)#
library(ggplot2)#
ggplot(data=test) +#
   facet_wrap(~PlotID) +#
   geom_histogram(aes(x=dbh.recon))#
ggplot(data=test) +#
   facet_wrap(~Species) +#
   geom_histogram(aes(x=dbh.recon))#
hist(test$dbh.recon)#
#
gam1 <- gamm(RW ~ s(tmean, k=3, by=Species) +#
                  s(precip, k=3, by=Species) +#
                  s(dbh.recon, k=3, by=spp.plot),#
                  random=list(Canopy.Class=~1),#
                  data=test)#
 par(mfrow=c(4,2)); plot(gam1$gam, ylim=c(-0.025, 0.025))#
################################################### #
# Copied over from 0_process_gamm.R#
# This will give us the sensitivities of RW in a pretty format.#
# Set up a dummy dataset for the script to run correctly#
#
# number of simulations to run#
n <- 25 #
data <- test#
		n.out = n#
#
		new.dat <- data.frame(Model="Harvard.test",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))
vars.num <- vector()#
		for(v in vars){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}
vars.num
for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}
vars.num
predictors.all[!predictors.all %in% vars.num]
for(v in predictors.all[!predictors.all %in% vars.num]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}
summary(new.dat)
dim(new.dat)
new.dat <- data.frame(Model="Harvard.test",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))#
		# Figure out which vars are numeric vs. factor#
		vars.num <- vector()#
		for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}#
		# Getting the unique values of our factor variables and adding them to the data frame#
		for(v in predictors.all[!predictors.all %in% vars.num & !predictors.all=="Species"]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}#
		# getting species from species.plot#
		new.dat$Species <- as.factor(substr(new.dat$spp.plot, 1, 4))
summary(new.dat)
# Putting the numerical variables into an array and adding it in #
		var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))#
		names(var.temp) <- vars.num#
		for(v in vars.num){#
			var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)#
		}								#
		new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
summary(new.dat)
dim(new.dat)
ci.terms.pred <- post.distns(model.gam=gamm.model, model.name=model.name, n=n, newdata=new.dat, vars=vars, terms=T)
summary(ci.terms.pred)
ci.terms.pred <- post.distns(model.gam=gamm.model, model.name=model.name, n=n, newdata=new.dat, vars=vars, terms=T)
# SOurce & run the function
source("R/0_Calculate_GAMM_Posteriors.R")
source("0_Calculate_GAMM_Posteriors.R")
ci.terms.pred <- post.distns(model.gam=gamm.model, model.name=model.name, n=n, newdata=new.dat, vars=vars, terms=T)
ci.terms.pred <- post.distns(model.gam=gam1, model.name=model.name, n=n, newdata=new.dat, vars=vars, terms=T)
ci.terms.pred <- post.distns(model.gam=gam1, model.name=model.name, n=n, newdata=new.dat, vars=predictors.all, terms=T)
ci.terms.pred <- post.distns(model.gam=gam1, model.name="Harvard.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)
summary(ci.terms.pred)
summary(ci.terms.pred$ci)
ci.out <- ci.terms.pred$ci # separting out the confidence interval
ci.out$x.fac <- as.factor(paste(ci.out$x))
summary(ci.out)
ci.out[ci.out$Effect %in% vars.num, "x.fac"] <- NA # getting rid of continuous levels
ci.out$x <- as.numeric(ci.out$x) # making x numeric; will make factors NA
summary(ci.out)
ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels
ci.out <- ci.terms.pred$ci # separting out the confidence interval #
		ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		ci.out$x <- as.numeric(ci.out$x) # making x numeric; will make factors NA#
		summary(ci.out)
vars.num
ggplot(data=ci.out[ci.out$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
ggplot(data=ci.out[ci.out$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
summary(ci.out)
ci.out$PlotID <- substr(ci.out$spp.plot, 6, nchar(paste(ci.out$spp.plot)))
summary(ci.out)
ci.out$PlotID <- as.factor(substr(ci.out$spp.plot, 6, nchar(paste(ci.out$spp.plot)))) # adding a plotID factor
summary(ci.out)
ggplot(data=ci.out[ci.out$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
library(mgcv)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)#
summary(data.use)
unique(data.use$site)
unique(data.use$Site)
test <- data.use[data.use$Site=="Harvard" & data.use$Site== "Morgan Monroe State Park" & data.use$Year > 1980,]
summary(test)
test <- data.use[data.use$Site==c("Harvard","Morgan Monroe State Park") & data.use$Year > 1980,]#
summary(test)
predictors.all <- c("RW", "tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot")
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]
'unique(test$Species)
unique(test$Species)
species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", )
test <- test[test$Species %in% species.use,]
predictors.all <- c("RW", "tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site")
# Getting rid of observations that have NAs in the important variables#
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]#
#
# Subsetting to a set of species that we have enough data to feel good about#
species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", )#
test <- test[test$Species %in% species.use,]
species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU")
test <- test[test$Species %in% species.use,]
predictors.all <- c("RW", "tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site")
test <- test[complete.cases(test[,predictors.all]),]
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]
species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU")#
test <- test[test$Species %in% species.use,]
summary(test)
summary(test$Live.Dead)
summary(test$Canopy.Class)
gam1 <- gamm(RW ~ s(tmean, k=3, by=Species) +#
                  s(precip, k=3, by=Species) +#
                  s(dbh.recon, k=3, by=spp.plot) +#
                  Canopy.Class,#
                  random=list(Site=~1),#
                  data=test)
gam1 <- gamm(RW ~ s(tmean, k=3, by=Species) +#
                  s(precip, k=3, by=Species) +#
                  #s(dbh.recon, k=3, by=spp.plot) +#
                  Canopy.Class,#
                  random=list(Site=~1),#
                  data=test)
gam1 <- gamm(RW ~ s(tmean, k=3, by=Species) +#
                  s(precip, k=3, by=Species) +#
                  s(dbh.recon, k=3, by=Species) +#
                  Canopy.Class,#
                  random=list(Site=~1),#
                  data=test)
gam2 <- gamm(RW ~ s(tmean, k=3, by=Canopy.Class) +#
                  s(precip, k=3, by=Canopy.Class) +#
                  s(dbh.recon, k=3, by=Canopy.Class),#
                  random=list(Site=~1),#
                  data=test)
par(mfrow=c(4,2)); plot(gam1$gam, ylim=c(-0.025, 0.025))
par(mfrow=c(4,2)); plot(gam2$gam, ylim=c(-0.025, 0.025))
gam1 <- gamm(RW ~ s(tmean, k=3, by=Species) +#
                  s(precip, k=3, by=Species) +#
                  s(dbh.recon, k=3, by=Species) +#
                  Canopy.Class,#
                  random=list(Site=~1, PlotID=~1),#
                  data=test)
gam2 <- gamm(RW ~ s(tmean, k=3, by=Canopy.Class) +#
                  s(precip, k=3, by=Canopy.Class) +#
                  s(dbh.recon, k=3, by=Canopy.Class),#
                  random=list(Site=~1, PlotID=~1),#
                  data=test)
par(mfrow=c(4,2)); plot(gam1$gam, ylim=c(-0.025, 0.025))#
 par(mfrow=c(4,2)); plot(gam2$gam, ylim=c(-0.025, 0.025))
par(mfrow=c(4,2)); plot(gam1$gam, ylim=c(-0.025, 0.025))
summary(gam1)
n <- 25 #
data <- test#
		n.out = n#
#
		new.dat <- data.frame(Model="harv_mmf.test",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))#
		# Figure out which vars are numeric vs. factor#
		vars.num <- vector()#
		for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}#
		# Getting the unique values of our factor variables and adding them to the data frame#
		for(v in predictors.all[!predictors.all %in% vars.num & !predictors.all=="Species"]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}#
		# getting species from species.plot#
		new.dat$Species <- as.factor(substr(new.dat$spp.plot, 1, 4))#
		# Putting the numerical variables into an array and adding it in #
		var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))#
		names(var.temp) <- vars.num#
		for(v in vars.num){#
			var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)#
		}								#
		new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		summary(new.dat)#
		# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		ci.terms.pred <- post.distns(model.gam=gam1, model.name="Harvard.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		ci.out <- ci.terms.pred$ci # separting out the confidence interval #
		ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		ci.out$x <- as.numeric(ci.out$x) # making x numeric; will make factors NA#
		summary(ci.out)#
		ggplot(data=ci.out[ci.out$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))#
		ci.out$PlotID <- as.factor(substr(ci.out$spp.plot, 6, nchar(paste(ci.out$spp.plot)))) # adding a plotID factor#
		summary(ci.out)#
		ggplot(data=ci.out[ci.out$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
library(ggplot2)
ggplot(data=ci.out[ci.out$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
ci.out$PlotID <- as.factor(substr(ci.out$spp.plot, 6, nchar(paste(ci.out$spp.plot)))) # adding a plotID factor#
		summary(ci.out)
ggplot(data=ci.out[ci.out$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
ggplot(data=ci.out[ci.out$Effect == "RW", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
ggplot(data=ci.out[ci.out$Effect == "Canopy.Class", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
ggplot(data=ci.out[ci.out$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
n <- 100#
data <- test
n.out = n#
#
		new.dat <- data.frame(Model="harv_mmf_species.test",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))#
		# Figure out which vars are numeric vs. factor#
		vars.num <- vector()#
		for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}#
		# Getting the unique values of our factor variables and adding them to the data frame#
		for(v in predictors.all[!predictors.all %in% vars.num & !predictors.all=="Species"]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}#
		# getting species from species.plot#
		new.dat$Species <- as.factor(substr(new.dat$spp.plot, 1, 4))#
		# Putting the numerical variables into an array and adding it in #
		var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))#
		names(var.temp) <- vars.num#
		for(v in vars.num){#
			var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)#
		}								#
		new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		summary(new.dat)#
		# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		ci.terms.pred <- post.distns(model.gam=gam1, model.name="harv_mmf_species.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		ci.out <- ci.terms.pred$ci # separting out the confidence interval #
		ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		ci.out$x <- as.numeric(ci.out$x) # making x numeric; will make factors NA#
		summary(ci.out)#
		ggplot(data=ci.out[ci.out$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))#
		ci.out$PlotID <- as.factor(substr(ci.out$spp.plot, 6, nchar(paste(ci.out$spp.plot)))) # adding a plotID factor#
		summary(ci.out)
ggplot(data=ci.out[ci.out$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
ci.out$PlotID <- as.factor(substr(ci.out$spp.plot, 6, nchar(paste(ci.out$spp.plot)))) # adding a plotID factor#
		summary(ci.out)
ggplot(data=ci.out[ci.out$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
n <- 100 #
data <- test#
		n.out = n#
#
		new.dat <- data.frame(Model="harv_mmf_cc.test",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))#
		# Figure out which vars are numeric vs. factor#
		vars.num <- vector()#
		for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}#
		# Getting the unique values of our factor variables and adding them to the data frame#
		for(v in predictors.all[!predictors.all %in% vars.num & !predictors.all=="Species"]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}#
		# getting species from species.plot#
		new.dat$Species <- as.factor(substr(new.dat$spp.plot, 1, 4))#
		# Putting the numerical variables into an array and adding it in #
		var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))#
		names(var.temp) <- vars.num#
		for(v in vars.num){#
			var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)#
		}								#
		new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		summary(new.dat)#
		# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		ci.terms.pred <- post.distns(model.gam=gam2, model.name="harv_mmf_cc.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		ci.out <- ci.terms.pred$ci # separting out the confidence interval #
		ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		ci.out$x <- as.numeric(ci.out$x) # making x numeric; will make factors NA#
		summary(ci.out)
ggplot(data=ci.out[ci.out$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
ci.out$PlotID <- as.factor(substr(ci.out$spp.plot, 6, nchar(paste(ci.out$spp.plot)))) # adding a plotID factor#
		summary(ci.out)
ggplot(data=ci.out[ci.out$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
gam2 <- gamm(RW ~ s(tmean, k=3, by=Canopy.Class) +#
                  s(precip, k=3, by=Canopy.Class) +#
                  s(dbh.recon, k=3, by=Canopy.Class)+#
                  Species,#
                  random=list(Site=~1, PlotID=~1),#
                  data=test)
#----------------------------------------------#
# Gam2 graphs#
n <- 100 #
data <- test#
		n.out = n#
#
		new.dat <- data.frame(Model="harv_mmf_cc.test",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))#
		# Figure out which vars are numeric vs. factor#
		vars.num <- vector()#
		for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}#
		# Getting the unique values of our factor variables and adding them to the data frame#
		for(v in predictors.all[!predictors.all %in% vars.num & !predictors.all=="Species"]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}#
		# getting species from species.plot#
		new.dat$Species <- as.factor(substr(new.dat$spp.plot, 1, 4))#
		# Putting the numerical variables into an array and adding it in #
		var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))#
		names(var.temp) <- vars.num#
		for(v in vars.num){#
			var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)#
		}								#
		new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		summary(new.dat)#
		# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		ci.terms.pred <- post.distns(model.gam=gam2, model.name="harv_mmf_cc.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		ci.out <- ci.terms.pred$ci # separting out the confidence interval #
		ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		ci.out$x <- as.numeric(ci.out$x) # making x numeric; will make factors NA#
		summary(ci.out)
ggplot(data=ci.out[ci.out$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
ci.out$PlotID <- as.factor(substr(ci.out$spp.plot, 6, nchar(paste(ci.out$spp.plot)))) # adding a plotID factor#
		summary(ci.out)
ggplot(data=ci.out[ci.out$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Species), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Species))
summary(test)
unique(data.use$Species)
unique(data.use$Site)
test <- data.use[data.use$Site==c("Harvard",#
								  "Morgan Monroe State Park", #
								  "Missouri Ozark", #
								  "Oak Openings",#
								  "Howland"),]
test <- data.use[data.use$Site==c("Harvard", "Morgan Monroe State Park", "Missouri Ozark", "Oak Openings", "Howland"),]
test <- data.use[data.use$Site==c("Harvard", "Morgan Monroe State Park", "Missouri Ozark"),]
library(mgcv)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)#
summary(data.use)
test <- data.use[data.use$Site==c("Harvard", "Morgan Monroe State Park", "Missouri Ozark"),]
test <- data.use[data.use$Site==c("Harvard", "Morgan Monroe State Park"),]
test <- data.use[data.use$Site==c("Harvard", "Morgan Monroe State Park", "Missouri Ozark", "Oak Openings", "Howland") & data.use$Year > 1905,]
test <- data.use[data.use$Site==c("Harvard", "Morgan Monroe State Park", "Missouri Ozark", "Oak Openings", "Howland") & data.use$Year > 1920,]
test <- data.use[data.use$Site==c("Harvard", "Morgan Monroe State Park", "Missouri Ozark", "Oak Openings", "Howland") & data.use$Year > 1980,]
test <- data.use[data.use$Site==c("Harvard","Morgan Monroe State Park") & data.use$Year > 1980,]
library(mgcv)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)#
summary(data.use)
test <- data.use[data.use$Site==c("Harvard","Morgan Monroe State Park") & data.use$Year > 1980,]
