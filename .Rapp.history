summary(test[test$group %in% "ACRU",])
summary(ci.terms.graph)
summary(ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon",])
summary(ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" | ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x <=50,])
summary(ci.terms.graph[ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x <=50,])
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% c("tmean", "precip") & ci.terms.graph$group %in% "ACRU" & ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x <=50, ]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Effect), alpha=0.4) +#
			geom_line(aes(x=x, y=mean, color=Effect)) +#
			scale_color_manual(values= c("red", "blue", "green")) +#
			scale_fill_manual(values=c("red", "blue", "green"))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
summary(ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" | ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x <=50,])
summary(ci.terms.graph[ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x <=50,])
meow <- ci.terms.graph[!ci.terms.graph$Effect=="size" | (ci.terms.graph$Effect=="size" & ci.terms.graph$x<=50),]
summary(meow)
meow <- ci.terms.graph[!ci.terms.graph$Effect=="dbh.recon" | (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]
summary(meow[meow$Effect=="dbh.recon"])
summary(meow[meow$Effect=="dbh.recon",])
ggplot(data=ci.terms.graph[ci.terms.graph$group %in% "ACRU" & (ci.terms.graph$Effect %in% c("tmean", "precip") | (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50)),]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Effect), alpha=0.4) +#
			geom_line(aes(x=x, y=mean, color=Effect)) +#
			scale_color_manual(values= c("red", "blue", "green")) +#
			scale_fill_manual(values=c("red", "blue", "green"))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
pdf("figures/gam1_sensitivities_ACRU.pdf", width= 13, height = 8.5)					#
	ggplot(data=ci.terms.graph[ci.terms.graph$group %in% "ACRU" & (ci.terms.graph$Effect %in% c("tmean", "precip") | (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50)),]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Effect), alpha=0.4) +#
			geom_line(aes(x=x, y=mean, color=Effect)) +#
			scale_color_manual(values= c("red", "blue", "green")) +#
			scale_fill_manual(values=c("red", "blue", "green"))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()
library(ggplot2)#
library(stringr)#
load(file="processed_data/gamm_weights/gam3_weights.Rdata")#
#
summary(gam3.weights)#
factors.fits <- c("fit.tmean", "fit.precip", "fit.dbh.recon", "fit.full", "BA.inc")#
factors.weights <- c("weight.tmean", "weight.dbh.recon", "weight.precip")#
#
# Transforming things back to BA.inc rather than log#
gam3.weights[,which(substr(names(gam3.weights),1,3)=="fit")] <- exp(gam3.weights[,which(substr(names(gam3.weights),1,3)=="fit")] )#
othervars <- c("Year", "Site", "group.cc", "Model")#
#
data.graph1 <- aggregate(gam3.weights[,factors.fits], by = gam3.weights[,othervars], FUN= mean, na.rm=T)#
#
data.graph1[,paste(factors.fits, "upr", sep=".")] <- aggregate(gam3.weights[,factors.fits], by = gam3.weights[,othervars], FUN= quantile, prob= 0.975, na.rm=T)[,factors.fits]#
#
data.graph1[,paste(factors.fits, "lwr", sep=".")] <- aggregate(gam3.weights[,factors.fits], by = gam3.weights[,othervars], FUN= quantile, prob= 0.025, na.rm=T)[,factors.fits]#
#
summary(data.graph1)#
#
data.graph2 <- aggregate(abs(gam3.weights[,factors.weights]), by = gam3.weights[,othervars], FUN= mean, na.rm=T)#
#
data.graph2[,paste(factors.weights, "upr", sep=".")] <- aggregate(abs(gam3.weights[,factors.weights]), by = gam3.weights[,othervars], FUN= quantile, prob= 0.975, na.rm=T)[,factors.weights]#
#
data.graph2[,paste(factors.weights, "lwr", sep=".")] <- aggregate(abs(gam3.weights[,factors.weights]), by = gam3.weights[,othervars], FUN= quantile, prob= 0.025, na.rm=T)[,factors.weights]#
#
summary(data.graph2)#
#
data.graph <- merge(data.graph1, data.graph2, all.x=T, all.y=T)#
#
# data.graph <- gam3.weights[gam3.weights$TreeID== "MMA014",]#
summary(data.graph)#
gam3.weights$wts.check <- rowSums(abs(gam3.weights[,c("weight.tmean", "weight.precip", "weight.dbh.recon")]))#
data.graph$wts.check <- rowSums(abs(data.graph[,c("weight.tmean", "weight.precip", "weight.dbh.recon")]))#
#
summary(gam3.weights)#
summary(data.graph)#
#
# Ordering the data for graphing#
#
data.graph<- data.graph[order(data.graph$Year, data.graph$group.cc, data.graph$Site, decreasing=F),]#
plot.rgb <- function(STATE, GC, SIZE){	geom_line(data=data.graph[data.graph$State==STATE & data.graph$group.cc==GC,],aes(x=Year, y=fit.full), size=SIZE,#
  		        color=rgb(abs(data.graph[data.graph$State==STATE & data.graph$group.cc==GC,"weight.tmean"     ]), # red#
                        abs(data.graph[data.graph$State==STATE & data.graph$group.cc==GC,"weight.dbh.recon"     ]), # green#
                        abs(data.graph[data.graph$State==STATE & data.graph$group.cc==GC,"weight.precip"   ]))) }   # blue#
# Plotting the Obs and modeled with influence coloring#
data.graph$State <- recode(data.graph$Site, "'Howland' = 'ME';'Harvard' = 'MA';'Morgan Monroe State Park' = 'IN';'Missouri Ozark' = 'MO';'Oak Openings Toledo' = 'OH'")#
data.graph$State <- factor(data.graph$State, levels=c("MO", "IN", "OH", "MA", "ME"))#
#
for(i in unique(data.graph$group.cc)){#
	data.graph[data.graph$group.cc==i,"Canopy.Class"] <- str_sub(data.graph[data.graph$group.cc==i,"group.cc"], -1)#
	data.graph[data.graph$group.cc==i,"group"] <- substr(data.graph[data.graph$group.cc==i,"group.cc"], 1,4)#
}#
data.graph$Canopy.Class <- as.factor(data.graph$Canopy.Class)#
data.graph$group <- as.factor(data.graph$group)#
summary(data.graph)
ggplot(data = data.graph[data.graph$Canopy.Class=="D" & !data.graph$group.cc %in% c("BETULA.D", "CARYA.D", "FAGR.D", "FRAX.D", "SAAL.D", "ULRU", "ACSA"),]) + facet_grid(group ~ State) +#
	scale_x_continuous(expand=c(0,0)) +#
	scale_y_continuous(expand=c(0,0)) +#
	# facet_wrap(~TreeID, scales="free_y", space="free") +#
	# geom_ribbon(data=gam1.weights[gam1.weights$data.type=="Model",], aes(x=Year, ymin=Y.rel.10.lo*100, ymax=Y.rel.10.hi*100), 	alpha=0.5) +#
	geom_line(aes(x=Year, y=BA.inc), size=2, alpha=0.5) +#
	geom_ribbon(aes(x=Year, ymin=BA.inc.lwr, ymax=BA.inc.upr), alpha=0.3) +#
	geom_line(aes(x=Year, y = 0), linetype="dashed") +#
	# Harvard#
	plot.rgb("MA", "ACRU.D", 3) +#
	plot.rgb("MA", "PIST.D", 3) +#
	plot.rgb("MA", "TSCA.D", 3) +#
	plot.rgb("MA", "QURU.D", 3) +#
	plot.rgb("MA", "QUVE.D", 3) +#
	# plot.rgb("MA", "FRAX.D", 3) +#
	# plot.rgb("MA", "BETULA.D", 3) +#
	#plot.rgb("MA", "ACSA.D", 3) +#
	plot.rgb("MA", "QUAL.D", 3) +#
	# plot.rgb("MA", "FAGR.D", 3) +#
	#plot.rgb("MA", "ULRU.D", 3) +#
	# plot.rgb("MA", "CARYA.D", 3) +#
	# plot.rgb("MA", "SAAL.D", 3) +#
	# Howland#
	plot.rgb("ME", "ACRU.D", 3) +#
	plot.rgb("ME", "PIST.D", 3) +#
	plot.rgb("ME", "TSCA.D", 3) +#
	plot.rgb("ME", "QURU.D", 3) +#
	plot.rgb("ME", "QUVE.D", 3) +#
	# plot.rgb("ME", "FRAX.D", 3) +#
	# plot.rgb("ME", "BETULA.D", 3) +#
	#plot.rgb("ME", "ACSA.D", 3) +#
	plot.rgb("ME", "QUAL.D", 3) +#
	# plot.rgb("ME", "FAGR.D", 3) +#
	#plot.rgb("ME", "ULRU.D", 3) +#
	# plot.rgb("ME", "CARYA.D", 3) +#
	# plot.rgb("ME", "SAAL.D", 3) +#
	# Morgan Monroe#
	plot.rgb("IN", "ACRU.D", 3) +#
	plot.rgb("IN", "PIST.D", 3) +#
	plot.rgb("IN", "TSCA.D", 3) +#
	plot.rgb("IN", "QURU.D", 3) +#
	plot.rgb("IN", "QUVE.D", 3) +#
	# plot.rgb("IN", "FRAX.D", 3) +#
	# plot.rgb("IN", "BETULA.D", 3) +#
	#plot.rgb("IN", "ACSA.D", 3) +#
	plot.rgb("IN", "QUAL.D", 3) +#
	# plot.rgb("IN", "FAGR.D", 3) +#
	#plot.rgb("IN", "ULRU.D", 3) +#
	# plot.rgb("IN", "CARYA.D", 3) +#
	# plot.rgb("IN", "SAAL.D", 3) +#
	# Missouri Ozark#
	plot.rgb("MO", "ACRU.D", 3) +#
	plot.rgb("MO", "PIST.D", 3) +#
	plot.rgb("MO", "TSCA.D", 3) +#
	plot.rgb("MO", "QURU.D", 3) +#
	plot.rgb("MO", "QUVE.D", 3) +#
	# plot.rgb("MO", "FRAX.D", 3) +#
	# plot.rgb("MO", "BETULA.D", 3) +#
	#plot.rgb("MO", "ACSA.D", 3) +#
	plot.rgb("MO", "QUAL.D", 3) +#
	# plot.rgb("MO", "FAGR.D", 3) +#
	#plot.rgb("MO", "ULRU.D", 3) +#
	# plot.rgb("MO", "CARYA.D", 3) +#
	# plot.rgb("MO", "SAAL.D", 3) +#
	# Oak Openings#
	plot.rgb("OH", "ACRU.D", 3) +#
	plot.rgb("OH", "PIST.D", 3) +#
	plot.rgb("OH", "TSCA.D", 3) +#
	plot.rgb("OH", "QURU.D", 3) +#
	plot.rgb("OH", "QUVE.D", 3) +#
	# plot.rgb("OH", "FRAX.D", 3) +#
	# plot.rgb("OH", "BETULA.D", 3) +#
	#plot.rgb("OH", "ACSA.D", 3) +#
	plot.rgb("OH", "QUAL.D", 3) +#
	# plot.rgb("OH", "FAGR.D", 3) +#
	#plot.rgb("OH", "ULRU.D", 3) +#
	# plot.rgb("OH", "CARYA.D", 3) +#
	# plot.rgb("OH", "SAAL.D", 3) +#
	poster.theme2 +#
	labs(title= "Dominant Trees", x="Year", y = expression(bold(paste("BAI (mm"^"2", "y"^"-1",")"))))
ggplot(data = data.graph[data.graph$Canopy.Class=="D" & !data.graph$group.cc %in% c("BETULA.D", "CARYA.D", "FAGR.D", "FRAX.D", "SAAL.D", "ULRU", "ACSA"),]) + facet_grid(group ~ State) +#
	scale_x_continuous(expand=c(0,0)) +#
	scale_y_continuous(expand=c(0,0)) +#
	# facet_wrap(~TreeID, scales="free_y", space="free") +#
	# geom_ribbon(data=gam1.weights[gam1.weights$data.type=="Model",], aes(x=Year, ymin=Y.rel.10.lo*100, ymax=Y.rel.10.hi*100), 	alpha=0.5) +#
	geom_line(aes(x=Year, y=BA.inc), size=2, alpha=0.5) +#
	geom_ribbon(aes(x=Year, ymin=BA.inc.lwr, ymax=BA.inc.upr), alpha=0.3)
ggplot(data = data.graph[data.graph$Canopy.Class=="D" & !data.graph$group.cc %in% c("BETULA.D", "CARYA.D", "FAGR.D", "FRAX.D", "SAAL.D", "ULRU.D", "ACSA.D"),]) + facet_grid(group ~ State) +#
	scale_x_continuous(expand=c(0,0)) +#
	scale_y_continuous(expand=c(0,0)) +#
	# facet_wrap(~TreeID, scales="free_y", space="free") +#
	# geom_ribbon(data=gam1.weights[gam1.weights$data.type=="Model",], aes(x=Year, ymin=Y.rel.10.lo*100, ymax=Y.rel.10.hi*100), 	alpha=0.5) +#
	geom_line(aes(x=Year, y=BA.inc), size=2, alpha=0.5) +#
	geom_ribbon(aes(x=Year, ymin=BA.inc.lwr, ymax=BA.inc.upr), alpha=0.3) +#
	geom_line(aes(x=Year, y = 0), linetype="dashed") +#
	# Harvard#
	plot.rgb("MA", "ACRU.D", 3) +#
	plot.rgb("MA", "PIST.D", 3) +#
	plot.rgb("MA", "TSCA.D", 3) +#
	plot.rgb("MA", "QURU.D", 3) +#
	plot.rgb("MA", "QUVE.D", 3) +#
	# plot.rgb("MA", "FRAX.D", 3) +#
	# plot.rgb("MA", "BETULA.D", 3) +#
	#plot.rgb("MA", "ACSA.D", 3) +#
	plot.rgb("MA", "QUAL.D", 3) +#
	# plot.rgb("MA", "FAGR.D", 3) +#
	#plot.rgb("MA", "ULRU.D", 3) +#
	# plot.rgb("MA", "CARYA.D", 3) +#
	# plot.rgb("MA", "SAAL.D", 3) +#
	# Howland#
	plot.rgb("ME", "ACRU.D", 3) +#
	plot.rgb("ME", "PIST.D", 3) +#
	plot.rgb("ME", "TSCA.D", 3) +#
	plot.rgb("ME", "QURU.D", 3) +#
	plot.rgb("ME", "QUVE.D", 3) +#
	# plot.rgb("ME", "FRAX.D", 3) +#
	# plot.rgb("ME", "BETULA.D", 3) +#
	#plot.rgb("ME", "ACSA.D", 3) +#
	plot.rgb("ME", "QUAL.D", 3) +#
	# plot.rgb("ME", "FAGR.D", 3) +#
	#plot.rgb("ME", "ULRU.D", 3) +#
	# plot.rgb("ME", "CARYA.D", 3) +#
	# plot.rgb("ME", "SAAL.D", 3) +#
	# Morgan Monroe#
	plot.rgb("IN", "ACRU.D", 3) +#
	plot.rgb("IN", "PIST.D", 3) +#
	plot.rgb("IN", "TSCA.D", 3) +#
	plot.rgb("IN", "QURU.D", 3) +#
	plot.rgb("IN", "QUVE.D", 3) +#
	# plot.rgb("IN", "FRAX.D", 3) +#
	# plot.rgb("IN", "BETULA.D", 3) +#
	#plot.rgb("IN", "ACSA.D", 3) +#
	plot.rgb("IN", "QUAL.D", 3) +#
	# plot.rgb("IN", "FAGR.D", 3) +#
	#plot.rgb("IN", "ULRU.D", 3) +#
	# plot.rgb("IN", "CARYA.D", 3) +#
	# plot.rgb("IN", "SAAL.D", 3) +#
	# Missouri Ozark#
	plot.rgb("MO", "ACRU.D", 3) +#
	plot.rgb("MO", "PIST.D", 3) +#
	plot.rgb("MO", "TSCA.D", 3) +#
	plot.rgb("MO", "QURU.D", 3) +#
	plot.rgb("MO", "QUVE.D", 3) +#
	# plot.rgb("MO", "FRAX.D", 3) +#
	# plot.rgb("MO", "BETULA.D", 3) +#
	#plot.rgb("MO", "ACSA.D", 3) +#
	plot.rgb("MO", "QUAL.D", 3) +#
	# plot.rgb("MO", "FAGR.D", 3) +#
	#plot.rgb("MO", "ULRU.D", 3) +#
	# plot.rgb("MO", "CARYA.D", 3) +#
	# plot.rgb("MO", "SAAL.D", 3) +#
	# Oak Openings#
	plot.rgb("OH", "ACRU.D", 3) +#
	plot.rgb("OH", "PIST.D", 3) +#
	plot.rgb("OH", "TSCA.D", 3) +#
	plot.rgb("OH", "QURU.D", 3) +#
	plot.rgb("OH", "QUVE.D", 3) +#
	# plot.rgb("OH", "FRAX.D", 3) +#
	# plot.rgb("OH", "BETULA.D", 3) +#
	#plot.rgb("OH", "ACSA.D", 3) +#
	plot.rgb("OH", "QUAL.D", 3) +#
	# plot.rgb("OH", "FAGR.D", 3) +#
	#plot.rgb("OH", "ULRU.D", 3) +#
	# plot.rgb("OH", "CARYA.D", 3) +#
	# plot.rgb("OH", "SAAL.D", 3) +#
	poster.theme2 +#
	labs(title= "Dominant Trees", x="Year", y = expression(bold(paste("BAI (mm"^"2", "y"^"-1",")"))))
pdf("figures/gam3/gam3_SPP_CC_BAI_limiting_factors_D.pdf", width= 13, height = 8.5)#
ggplot(data = data.graph[data.graph$Canopy.Class=="D" & !data.graph$group.cc %in% c("BETULA.D", "CARYA.D", "FAGR.D", "FRAX.D", "SAAL.D", "ULRU.D", "ACSA.D"),]) + facet_grid(group ~ State) +#
	scale_x_continuous(expand=c(0,0)) +#
	scale_y_continuous(expand=c(0,0)) +#
	# facet_wrap(~TreeID, scales="free_y", space="free") +#
	# geom_ribbon(data=gam1.weights[gam1.weights$data.type=="Model",], aes(x=Year, ymin=Y.rel.10.lo*100, ymax=Y.rel.10.hi*100), 	alpha=0.5) +#
	geom_line(aes(x=Year, y=BA.inc), size=2, alpha=0.5) +#
	geom_ribbon(aes(x=Year, ymin=BA.inc.lwr, ymax=BA.inc.upr), alpha=0.3) +#
	geom_line(aes(x=Year, y = 0), linetype="dashed") +#
	# Harvard#
	plot.rgb("MA", "ACRU.D", 3) +#
	plot.rgb("MA", "PIST.D", 3) +#
	plot.rgb("MA", "TSCA.D", 3) +#
	plot.rgb("MA", "QURU.D", 3) +#
	plot.rgb("MA", "QUVE.D", 3) +#
	# plot.rgb("MA", "FRAX.D", 3) +#
	# plot.rgb("MA", "BETULA.D", 3) +#
	#plot.rgb("MA", "ACSA.D", 3) +#
	plot.rgb("MA", "QUAL.D", 3) +#
	# plot.rgb("MA", "FAGR.D", 3) +#
	#plot.rgb("MA", "ULRU.D", 3) +#
	# plot.rgb("MA", "CARYA.D", 3) +#
	# plot.rgb("MA", "SAAL.D", 3) +#
	# Howland#
	plot.rgb("ME", "ACRU.D", 3) +#
	plot.rgb("ME", "PIST.D", 3) +#
	plot.rgb("ME", "TSCA.D", 3) +#
	plot.rgb("ME", "QURU.D", 3) +#
	plot.rgb("ME", "QUVE.D", 3) +#
	# plot.rgb("ME", "FRAX.D", 3) +#
	# plot.rgb("ME", "BETULA.D", 3) +#
	#plot.rgb("ME", "ACSA.D", 3) +#
	plot.rgb("ME", "QUAL.D", 3) +#
	# plot.rgb("ME", "FAGR.D", 3) +#
	#plot.rgb("ME", "ULRU.D", 3) +#
	# plot.rgb("ME", "CARYA.D", 3) +#
	# plot.rgb("ME", "SAAL.D", 3) +#
	# Morgan Monroe#
	plot.rgb("IN", "ACRU.D", 3) +#
	plot.rgb("IN", "PIST.D", 3) +#
	plot.rgb("IN", "TSCA.D", 3) +#
	plot.rgb("IN", "QURU.D", 3) +#
	plot.rgb("IN", "QUVE.D", 3) +#
	# plot.rgb("IN", "FRAX.D", 3) +#
	# plot.rgb("IN", "BETULA.D", 3) +#
	#plot.rgb("IN", "ACSA.D", 3) +#
	plot.rgb("IN", "QUAL.D", 3) +#
	# plot.rgb("IN", "FAGR.D", 3) +#
	#plot.rgb("IN", "ULRU.D", 3) +#
	# plot.rgb("IN", "CARYA.D", 3) +#
	# plot.rgb("IN", "SAAL.D", 3) +#
	# Missouri Ozark#
	plot.rgb("MO", "ACRU.D", 3) +#
	plot.rgb("MO", "PIST.D", 3) +#
	plot.rgb("MO", "TSCA.D", 3) +#
	plot.rgb("MO", "QURU.D", 3) +#
	plot.rgb("MO", "QUVE.D", 3) +#
	# plot.rgb("MO", "FRAX.D", 3) +#
	# plot.rgb("MO", "BETULA.D", 3) +#
	#plot.rgb("MO", "ACSA.D", 3) +#
	plot.rgb("MO", "QUAL.D", 3) +#
	# plot.rgb("MO", "FAGR.D", 3) +#
	#plot.rgb("MO", "ULRU.D", 3) +#
	# plot.rgb("MO", "CARYA.D", 3) +#
	# plot.rgb("MO", "SAAL.D", 3) +#
	# Oak Openings#
	plot.rgb("OH", "ACRU.D", 3) +#
	plot.rgb("OH", "PIST.D", 3) +#
	plot.rgb("OH", "TSCA.D", 3) +#
	plot.rgb("OH", "QURU.D", 3) +#
	plot.rgb("OH", "QUVE.D", 3) +#
	# plot.rgb("OH", "FRAX.D", 3) +#
	# plot.rgb("OH", "BETULA.D", 3) +#
	#plot.rgb("OH", "ACSA.D", 3) +#
	plot.rgb("OH", "QUAL.D", 3) +#
	# plot.rgb("OH", "FAGR.D", 3) +#
	#plot.rgb("OH", "ULRU.D", 3) +#
	# plot.rgb("OH", "CARYA.D", 3) +#
	# plot.rgb("OH", "SAAL.D", 3) +#
	poster.theme2 +#
	labs(title= "Dominant Trees", x="Year", y = expression(bold(paste("BAI (mm"^"2", "y"^"-1",")"))))#
dev.off()
load("processed_data/gam_results/gam3_climate_by_canopyclass_interactions.Rdata")
"processed_data/gam_results/gam3_climate_by_canopyclass_interactions.Rdata")#
 par(mfrow=c(4,2)); plot(gam1$gam, ylim=c(-0.025, 0.025))#
 par(mfrow=c(4,2)); plot(gam2$gam, ylim=c(-0.025, 0.025))#
# MAKE gam2 by= canopy class#
# make sure to when adding multiple site to list Site in teh random list.#
# Random effects are hierarchical #
#----------------------------------------------#
# Gam1 graphs#
n <- 100#
data <- test#
		n.out = n#
#
		new.dat <- data.frame(Model="species_response",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))#
		# Figure out which vars are numeric vs. factor#
		vars.num <- vector()#
		for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}#
		# Getting the unique values of our factor variables and adding them to the data frame#
		# need to skip group & group.cc so we aren't trying to match Carya & Quercus etc#
		predictors.all <- predictors.all[!predictors.all %in% c("Species", "spp.plot")]#
		for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("group", "group.cc"))]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}#
		# getting species from species.plot#
		new.dat$group <- as.factor(substr(new.dat$group.plot, 1, 4))#
		# Adding in the group.canopy class then getting rid of combinations we don't actually have in our data#
		new.dat$group.cc <- as.factor(paste(new.dat$group, new.dat$Canopy.Class, sep="."))#
		new.dat <- new.dat[new.dat$group.cc %in% unique(test$group.cc),]#
		summary(new.dat)#
		# Putting the numerical variables into an array and adding it in #
		var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))#
		names(var.temp) <- vars.num#
		for(v in vars.num){#
			var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)#
		}								#
		new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		summary(new.dat)#
write.csv(new.dat, file="processed_data/sensitivity_extaction_dataframe.csv", row.names=F)								#
# Change which gamm you look at here!#
n <- 100						#
		# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		g1.ci.terms.pred <- post.distns(model.gam=gam1, model.name="species_response", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g1.ci.out <- g1.ci.terms.pred$ci # separting out the confidence interval #
		g1.ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g1.ci.out$x <- as.numeric(g1.ci.out$x) # making x numeric; will make factors NA#
		summary(g1.ci.out)#
spp.colors <- read.csv("spp.Colors.csv", header=T)	#
summary(spp.colors)	#
#
group.fig <- unique(g1.ci.out$group)#
group.fig <- group.fig[order(group.fig)]#
colors.use <- as.vector(c(paste(spp.colors[spp.colors$Species %in% group.fig, "color"])))#
#
ci.terms.graph <- g1.ci.out#
ci.terms.graph[ci.terms.graph$mean<(-15),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr<(-15),"lwr"] <- -15#
ci.terms.graph[ci.terms.graph$upr<(-15),"upr"] <- -15 #
ci.terms.graph[which(ci.terms.graph$mean>10),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr>(10),"lwr"] <- 10 #
ci.terms.graph[ci.terms.graph$upr>(10),"upr"] <- 10 #
pdf("figures/gam1_sensitivities.pdf", width= 13, height = 8.5)		#
		ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% c("tmean", "precip"), ]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()#
pdf("figures/gam1_sensitivities_ACRU.pdf", width= 13, height = 8.5)					#
	ggplot(data=ci.terms.graph[ci.terms.graph$group %in% "ACRU" & (ci.terms.graph$Effect %in% c("tmean", "precip") | (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50)),]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Effect), alpha=0.4) +#
			geom_line(aes(x=x, y=mean, color=Effect)) +#
			scale_color_manual(values= c("red", "blue", "green")) +#
			scale_fill_manual(values=c("red", "blue", "green"))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()#
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "tmean", ]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)#
			ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "precip", ]) + #
			facet_grid(Canopy.Class~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)#
		g1.ci.out$PlotID <- as.factor(substr(g1.ci.out$group.plot, 6, nchar(paste(g1.ci.out$group.plot)))) # adding a plotID factor#
		summary(g1.ci.out)#
		ggplot(data=g1.ci.out[g1.ci.out$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)#
#
#----------------------------------------------#
# GAM 2								#
		# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		g2.ci.terms.pred2 <- post.distns(model.gam=gam2, model.name="harv_mmf_cc.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g2.ci.out2 <- g2.ci.terms.pred2$ci # separting out the confidence interval #
		g2.ci.out2[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g2.ci.out2$x <- as.numeric(g2.ci.out2$x) # making x numeric; will make factors NA#
		summary(g2.ci.out2)
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip", "dbh.recon"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
library(mgcv)#
library(ggplot2)#
library(car)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate_and_BA.csv", header=T)#
#
data.use$group <- data.use$Species#
data.use$group <- recode(data.use$group, "'CAOV' = 'CARYA'; 'CACO' = 'CARYA'; #
  							'CATE' = 'CARYA'; 'ACSAC' = 'ACSA'; 'BEAL' = 'BETULA'; 'BELE' = 'BETULA'; 'QUMU' = 'QUAL'")#
#
data.use$group.plot <- as.factor(paste(data.use$group, data.use$PlotID, sep="."))#
#
data.use$Canopy.Class <- recode(data.use$Canopy.Class, "'C' = 'D'")#
summary(data.use)#
# reducing the amount of data for the test runs#
sites.use <- c("Harvard", "Howland", "Morgan Monroe State Park", "Oak Openings Toledo", "Missouri Ozark")#
#
test <- data.use[data.use$Site %in% sites.use & !is.na(data.use$RW) & !is.na(data.use$BA.inc),]#
summary(test)#
#
test$group.cc <- as.factor(paste(test$group, test$Canopy.Class, sep="."))#
summary(test)#
# Get a list of what predictors & responses I'm using#
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "group", "group.plot", "group.cc") #
#
# Getting rid of observations that have NAs in the important variables#
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]#
#
# Subsetting to a set of species that we have enough data to feel good about#
#species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", "QUAL", "CAOV", "CACO", "CATE", "JUVI", "QUVE", "PCRU", "THOC", "PIST")#
group.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU")#
#
test <- test[test$group %in% group.use,]#
#
summary(test)#
#
par(new=F)#
plot(test[test$TreeID=="MMA003", "BA.inc"]~ test[test$TreeID=="MMA003","Year"], type="l")#
test$log.dbh <- log(test$dbh.recon)#
summary(test)#
#
summary(test)#
summary(test$Live.Dead)#
summary(test$Canopy.Class)#
# RW <- test$RW#
# temp <- test$tmean#
# precip <- test$precip#
# canopy <- test$Canopy.Class#
# size <- test$DBH..cm.#
# species <- unique(test$Species)#
# library(ggplot2)#
# ggplot(data=test) +#
   # facet_wrap(~PlotID) +#
   # geom_histogram(aes(x=dbh.recon))#
# ggplot(data=test) +#
   # facet_wrap(~Species) +#
   # geom_histogram(aes(x=dbh.recon))#
# hist(test$dbh.recon)#
# test2 <- test[test$group %in% c("QURU", "ACRU") & test$Year>=1980,]#
# test2 <- test[test$group %in% c("QURU", "ACRU"),]#
test2 <- test[test$Site %in% "Morgan Monroe State Park",]#
# test2$log.dbh <- log(test2$dbh.recon)#
# summary(test2)#
summary(test)#
test[test$BA.inc==0, "BA.inc"] <- 1e-6#
# test.gam3 <- test#
# test.gam3$Canopy.Class <- recode(test.gam3$Canopy.Class, "'C' = 'D'")#
# summary(test.gam3)
load("processed_data/gam_results/gam2_climate_by_canopyclass.Rdata")
# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		g2.ci.terms.pred2 <- post.distns(model.gam=gam2, model.name="harv_mmf_cc.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g2.ci.out2 <- g2.ci.terms.pred2$ci # separting out the confidence interval #
		g2.ci.out2[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g2.ci.out2$x <- as.numeric(g2.ci.out2$x) # making x numeric; will make factors NA#
		summary(g2.ci.out2)
# Gam1 graphs#
n <- 100#
data <- test#
		n.out = n#
#
		new.dat <- data.frame(Model="species_response",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))#
		# Figure out which vars are numeric vs. factor#
		vars.num <- vector()#
		for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}#
		# Getting the unique values of our factor variables and adding them to the data frame#
		# need to skip group & group.cc so we aren't trying to match Carya & Quercus etc#
		predictors.all <- predictors.all[!predictors.all %in% c("Species", "spp.plot")]#
		for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("group", "group.cc"))]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}#
		# getting species from species.plot#
		new.dat$group <- as.factor(substr(new.dat$group.plot, 1, 4))#
		# Adding in the group.canopy class then getting rid of combinations we don't actually have in our data#
		new.dat$group.cc <- as.factor(paste(new.dat$group, new.dat$Canopy.Class, sep="."))#
		new.dat <- new.dat[new.dat$group.cc %in% unique(test$group.cc),]#
		summary(new.dat)#
		# Putting the numerical variables into an array and adding it in #
		var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))#
		names(var.temp) <- vars.num#
		for(v in vars.num){#
			var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)#
		}								#
		new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		summary(new.dat)
# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		g2.ci.terms.pred2 <- post.distns(model.gam=gam2, model.name="harv_mmf_cc.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g2.ci.out2 <- g2.ci.terms.pred2$ci # separting out the confidence interval #
		g2.ci.out2[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g2.ci.out2$x <- as.numeric(g2.ci.out2$x) # making x numeric; will make factors NA#
		summary(g2.ci.out2)
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip", "dbh.recon"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
source("poster_theme2.R")
source("poster_theme.R")
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip", "dbh.recon"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
g2.ci.out2$PlotID <- as.factor(substr(g2.ci.out2$group.plot, 6, nchar(paste(g2.ci.out2$group.plot)))) # adding a plotID factor#
		summary(g2.ci.out2)
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon", ]) + #
			facet_wrap(Canopy.Class~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("dbh.recon", "tmean", "precip"), ]) + #
			facet_wrap(Canopy.Class~) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("dbh.recon", "tmean", "precip"), ]) + #
			facet_wrap(~Effect) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=anopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("dbh.recon", "tmean", "precip"), ]) + #
			facet_wrap(~Effect) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip", "dbh.recon") & g2.ci.out$group %in% "QURU", ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip", "dbh.recon") & g2.ci.out2$group %in% "QURU", ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon", ]) + #
			facet_wrap(Canopy.Class~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon", ]) + #
			facet_wrap(~PlotID) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon", ]) + #
			facet_wrap(~Site) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
summary(g2.ci.out2)
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon", ]) + #
			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
library(mgcv)#
library(ggplot2)#
library(car)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate_and_BA.csv", header=T)#
#
data.use$group <- data.use$Species#
data.use$group <- recode(data.use$group, "'CAOV' = 'CARYA'; 'CACO' = 'CARYA'; #
  							'CATE' = 'CARYA'; 'ACSAC' = 'ACSA'; 'BEAL' = 'BETULA'; 'BELE' = 'BETULA'; 'QUMU' = 'QUAL'")#
#
data.use$group.plot <- as.factor(paste(data.use$group, data.use$PlotID, sep="."))#
#
data.use$Canopy.Class <- recode(data.use$Canopy.Class, "'C' = 'D'")#
summary(data.use)#
# reducing the amount of data for the test runs#
sites.use <- c("Harvard", "Howland", "Morgan Monroe State Park", "Oak Openings Toledo", "Missouri Ozark")#
#
test <- data.use[data.use$Site %in% sites.use & !is.na(data.use$RW) & !is.na(data.use$BA.inc),]#
summary(test)#
#
test$group.cc <- as.factor(paste(test$group, test$Canopy.Class, sep="."))#
summary(test)#
# Get a list of what predictors & responses I'm using#
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "group", "group.plot", "group.cc") #
#
# Getting rid of observations that have NAs in the important variables#
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]#
#
# Subsetting to a set of species that we have enough data to feel good about#
#species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", "QUAL", "CAOV", "CACO", "CATE", "JUVI", "QUVE", "PCRU", "THOC", "PIST")#
group.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU")#
#
test <- test[test$group %in% group.use,]#
#
summary(test)#
#
par(new=F)#
plot(test[test$TreeID=="MMA003", "BA.inc"]~ test[test$TreeID=="MMA003","Year"], type="l")#
test$log.dbh <- log(test$dbh.recon)#
summary(test)#
#
summary(test)#
summary(test$Live.Dead)#
summary(test$Canopy.Class)#
# RW <- test$RW#
# temp <- test$tmean#
# precip <- test$precip#
# canopy <- test$Canopy.Class#
# size <- test$DBH..cm.#
# species <- unique(test$Species)#
# library(ggplot2)#
# ggplot(data=test) +#
   # facet_wrap(~PlotID) +#
   # geom_histogram(aes(x=dbh.recon))#
# ggplot(data=test) +#
   # facet_wrap(~Species) +#
   # geom_histogram(aes(x=dbh.recon))#
# hist(test$dbh.recon)#
# test2 <- test[test$group %in% c("QURU", "ACRU") & test$Year>=1980,]#
# test2 <- test[test$group %in% c("QURU", "ACRU"),]#
test2 <- test[test$Site %in% "Morgan Monroe State Park",]#
# test2$log.dbh <- log(test2$dbh.recon)#
# summary(test2)#
summary(test)#
test[test$BA.inc==0, "BA.inc"] <- 1e-6#
# test.gam3 <- test#
# test.gam3$Canopy.Class <- recode(test.gam3$Canopy.Class, "'C' = 'D'")#
# summary(test.gam3)
load("processed_data/gam_results/gam2_climate_by_canopyclass.Rdata")
n <- 100#
data <- test#
		n.out = n#
#
		new.dat <- data.frame(Model="species_response",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))#
		# Figure out which vars are numeric vs. factor#
		vars.num <- vector()#
		for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}#
		# Getting the unique values of our factor variables and adding them to the data frame#
		# need to skip group & group.cc so we aren't trying to match Carya & Quercus etc#
		predictors.all <- predictors.all[!predictors.all %in% c("Species", "spp.plot")]#
		for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("group", "group.cc"))]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}#
		# getting species from species.plot#
		new.dat$group <- as.factor(substr(new.dat$group.plot, 1, 4))#
		# Adding in the group.canopy class then getting rid of combinations we don't actually have in our data#
		new.dat$group.cc <- as.factor(paste(new.dat$group, new.dat$Canopy.Class, sep="."))#
		new.dat <- new.dat[new.dat$group.cc %in% unique(test$group.cc),]#
		summary(new.dat)#
		# Putting the numerical variables into an array and adding it in #
		var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))#
		names(var.temp) <- vars.num#
		for(v in vars.num){#
			var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)#
		}								#
		new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		summary(new.dat)
# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		g2.ci.terms.pred2 <- post.distns(model.gam=gam2, model.name="harv_mmf_cc.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g2.ci.out2 <- g2.ci.terms.pred2$ci # separting out the confidence interval #
		g2.ci.out2[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g2.ci.out2$x <- as.numeric(g2.ci.out2$x) # making x numeric; will make factors NA#
		summary(g2.ci.out2)
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
source("poster_theme.R")
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
spp.colors <- read.csv("spp.Colors.csv", header=T)	#
summary(spp.colors)	#
#
group.fig <- unique(g1.ci.out$group)#
group.fig <- group.fig[order(group.fig)]#
colors.use <- as.vector(c(paste(spp.colors[spp.colors$Species %in% group.fig, "color"])))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			scale_color_manual(values=c("#E69F00", "#0072B2", "#009E73")) +#
			scale_fill_manual(values=c("#E69F00", "#0072B2", "#009E73")) +#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			scale_color_manual(values=c("#0072B2", "#E69F00", "#009E73")) +#
			scale_fill_manual(values=c("#0072B2", "#E69F00", "#009E73")) +#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			scale_color_manual(values=c("#0072B2", "#009E73", "#E69F00", )) +#
			scale_fill_manual(values=c("#0072B2", "#009E73",  "#E69F00")) +#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			scale_color_manual(values=c("#0072B2", "#009E73", "#E69F00")) +#
			scale_fill_manual(values=c("#0072B2", "#009E73",  "#E69F00")) +#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
pdf("figures/gam2_sensitivities.pdf", width= 13, height = 8.5)		#
		ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			scale_color_manual(values=c("#0072B2", "#009E73", "#E69F00")) +#
			scale_fill_manual(values=c("#0072B2", "#009E73",  "#E69F00")) +#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()
library(mgcv)#
library(ggplot2)#
library(car)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate_and_BA.csv", header=T)#
#
data.use$group <- data.use$Species#
data.use$group <- recode(data.use$group, "'CAOV' = 'CARYA'; 'CACO' = 'CARYA'; #
  							'CATE' = 'CARYA'; 'ACSAC' = 'ACSA'; 'BEAL' = 'BETULA'; 'BELE' = 'BETULA'; 'QUMU' = 'QUAL'")#
#
data.use$group.plot <- as.factor(paste(data.use$group, data.use$PlotID, sep="."))#
#
data.use$Canopy.Class <- recode(data.use$Canopy.Class, "'C' = 'D'")#
summary(data.use)#
# reducing the amount of data for the test runs#
sites.use <- c("Harvard", "Howland", "Morgan Monroe State Park", "Oak Openings Toledo", "Missouri Ozark")#
#
test <- data.use[data.use$Site %in% sites.use & !is.na(data.use$RW) & !is.na(data.use$BA.inc),]#
summary(test)#
#
test$group.cc <- as.factor(paste(test$group, test$Canopy.Class, sep="."))#
summary(test)#
# Get a list of what predictors & responses I'm using#
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "group", "group.plot", "group.cc") #
#
# Getting rid of observations that have NAs in the important variables#
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]#
#
# Subsetting to a set of species that we have enough data to feel good about#
#species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", "QUAL", "CAOV", "CACO", "CATE", "JUVI", "QUVE", "PCRU", "THOC", "PIST")#
group.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU")#
#
test <- test[test$group %in% group.use,]#
#
summary(test)#
#
par(new=F)#
plot(test[test$TreeID=="MMA003", "BA.inc"]~ test[test$TreeID=="MMA003","Year"], type="l")#
test$log.dbh <- log(test$dbh.recon)#
summary(test)#
#
summary(test)#
summary(test$Live.Dead)#
summary(test$Canopy.Class)#
# RW <- test$RW#
# temp <- test$tmean#
# precip <- test$precip#
# canopy <- test$Canopy.Class#
# size <- test$DBH..cm.#
# species <- unique(test$Species)#
# library(ggplot2)#
# ggplot(data=test) +#
   # facet_wrap(~PlotID) +#
   # geom_histogram(aes(x=dbh.recon))#
# ggplot(data=test) +#
   # facet_wrap(~Species) +#
   # geom_histogram(aes(x=dbh.recon))#
# hist(test$dbh.recon)#
# test2 <- test[test$group %in% c("QURU", "ACRU") & test$Year>=1980,]#
# test2 <- test[test$group %in% c("QURU", "ACRU"),]#
test2 <- test[test$Site %in% "Morgan Monroe State Park",]#
# test2$log.dbh <- log(test2$dbh.recon)#
# summary(test2)#
summary(test)#
test[test$BA.inc==0, "BA.inc"] <- 1e-6#
# test.gam3 <- test#
# test.gam3$Canopy.Class <- recode(test.gam3$Canopy.Class, "'C' = 'D'")#
# summary(test.gam3)
load("processed_data/gam_results/gam1_climate_by_species.Rdata")
load("processed_data/gam_results/gam2_climate_by_canopyclass.Rdata")
load("processed_data/gam_results/gam3_climate_by_canopyclass_interactions.Rdata")
#----------------------------------------------#
# Gam1 graphs#
n <- 100#
data <- test#
		n.out = n#
#
		new.dat <- data.frame(Model="species_response",#
							  Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))#
		# Figure out which vars are numeric vs. factor#
		vars.num <- vector()#
		for(v in predictors.all){#
			if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)#
		}#
		# Getting the unique values of our factor variables and adding them to the data frame#
		# need to skip group & group.cc so we aren't trying to match Carya & Quercus etc#
		predictors.all <- predictors.all[!predictors.all %in% c("Species", "spp.plot")]#
		for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("group", "group.cc"))]){#
			# if v is a factor, merge all unique values into the dataframe#
			var.temp <- data.frame(x=unique(data[,v])) #
			names(var.temp) <- v#
			new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		}#
		# getting species from species.plot#
		new.dat$group <- as.factor(substr(new.dat$group.plot, 1, 4))#
		# Adding in the group.canopy class then getting rid of combinations we don't actually have in our data#
		new.dat$group.cc <- as.factor(paste(new.dat$group, new.dat$Canopy.Class, sep="."))#
		new.dat <- new.dat[new.dat$group.cc %in% unique(test$group.cc),]#
		summary(new.dat)#
		# Putting the numerical variables into an array and adding it in #
		var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))#
		names(var.temp) <- vars.num#
		for(v in vars.num){#
			var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)#
		}								#
		new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)#
		summary(new.dat)#
write.csv(new.dat, file="processed_data/sensitivity_extaction_dataframe.csv", row.names=F)								#
# Change which gamm you look at here!#
n <- 100						#
		# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		g1.ci.terms.pred <- post.distns(model.gam=gam1, model.name="species_response", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g1.ci.out <- g1.ci.terms.pred$ci # separting out the confidence interval #
		g1.ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g1.ci.out$x <- as.numeric(g1.ci.out$x) # making x numeric; will make factors NA#
		summary(g1.ci.out)#
spp.colors <- read.csv("spp.Colors.csv", header=T)	#
summary(spp.colors)	#
#
group.fig <- unique(g1.ci.out$group)#
group.fig <- group.fig[order(group.fig)]#
colors.use <- as.vector(c(paste(spp.colors[spp.colors$Species %in% group.fig, "color"])))#
#
ci.terms.graph <- g1.ci.out#
ci.terms.graph[ci.terms.graph$mean<(-15),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr<(-15),"lwr"] <- -15#
ci.terms.graph[ci.terms.graph$upr<(-15),"upr"] <- -15 #
ci.terms.graph[which(ci.terms.graph$mean>10),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr>(10),"lwr"] <- 10 #
ci.terms.graph[ci.terms.graph$upr>(10),"upr"] <- 10
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% c("tmean", "precip", "dbh.recon"), ]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
source("poster_theme.R")
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% c("tmean", "precip", "dbh.recon"), ]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon", ]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
pdf("figures/gam1_sensitivities_Size.pdf", width= 13, height = 8.5)		#
		ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon", ]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()
summary(test)
summary(test[test$group %in% group.use,])
ggplot(data=ci.terms.graph[(ci.terms.graph$Effect %in% "dbh.recon" | (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50)),]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[(ci.terms.graph$Effect %in% "c("tmean", "precip")" | (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50)),]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[(ci.terms.graph$Effect %in% c("tmean", "precip") | (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50)),]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
summary(test)
pdf("figures/gam1_sensitivities_Size.pdf", width= 13, height = 8.5)		#
		ggplot(data=ci.terms.graph[ (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]) + #
			facet_grid(~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()
# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		g2.ci.terms.pred2 <- post.distns(model.gam=gam2, model.name="harv_mmf_cc.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g2.ci.out2 <- g2.ci.terms.pred2$ci # separting out the confidence interval #
		g2.ci.out2[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g2.ci.out2$x <- as.numeric(g2.ci.out2$x) # making x numeric; will make factors NA#
		summary(g2.ci.out2)
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% c("tmean", "precip"), ]) + #
			facet_wrap(~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=Canopy.Class), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=Canopy.Class))+#
			scale_color_manual(values=c("#0072B2", "#009E73", "#E69F00")) +#
			scale_fill_manual(values=c("#0072B2", "#009E73",  "#E69F00")) +#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
g2.ci.out2$PlotID <- as.factor(substr(g2.ci.out2$group.plot, 6, nchar(paste(g2.ci.out2$group.plot)))) # adding a plotID factor#
		summary(g2.ci.out2)
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon", ]) + #
			facet_wrap(~Canopy.Class) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon", ]) + #
			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon", ]) + #
#			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon", ]) + #
			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))
pdf("figures/gam2_sensitivities_size.pdf", width = 13, height= 8.5)		#
		ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2#
dev.off()
g3.ci.terms.pred <- post.distns(model.gam=gam3, model.name="harv_mmf_cc.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g3.ci.out <- g3.ci.terms.pred$ci # separting out the confidence interval #
		g3.ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g3.ci.out$x <- as.numeric(g3.ci.out$x) # making x numeric; will make factors NA#
		summary(g3.ci.out)#
ci.terms.graph <- g3.ci.out#
ci.terms.graph[ci.terms.graph$mean<(-2.5),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr<(-2.5),"lwr"] <- -2.5#
ci.terms.graph[ci.terms.graph$upr<(-2.5),"upr"] <- -2.5 #
ci.terms.graph[which(ci.terms.graph$mean>2.5),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr>(2.5),"lwr"] <- 2.5 #
ci.terms.graph[ci.terms.graph$upr>(2.5),"upr"] <- 2.5
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% c("tmean", "precip"), ]) + #
			facet_grid(Canopy.Class~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<-50, ]) + #
			facet_grid(Canopy.Class~Effect, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
summary(ci.terms.graph)
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~Canopy.CLass) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~Canopy.Class) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(group~Canopy.Class) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~group.cc) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_grid(~group.cc) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_grid(group.cc~.) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2
ggplot(data=g2.ci.out2[g2.ci.out2$Effect %in% "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~group.cc) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<, ]) + #
			facet_grid(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_grid(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_wrap(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_wrap(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			#poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
pdf("figures/gam3_sensitivities_size.pdf", width= 13, height = 8.5)#
		ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_wrap(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			#poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			poster.theme2
# Change which gamm you look at here!#
n <- 100						#
		# SOurce & run the function#
		source("0_Calculate_GAMM_Posteriors.R")#
		g1.ci.terms.pred <- post.distns(model.gam=gam1, model.name="species_response", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g1.ci.out <- g1.ci.terms.pred$ci # separting out the confidence interval #
		g1.ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g1.ci.out$x <- as.numeric(g1.ci.out$x) # making x numeric; will make factors NA#
		summary(g1.ci.out)#
spp.colors <- read.csv("spp.Colors.csv", header=T)	#
summary(spp.colors)	#
#
group.fig <- unique(g1.ci.out$group)#
group.fig <- group.fig[order(group.fig)]#
colors.use <- as.vector(c(paste(spp.colors[spp.colors$Species %in% group.fig, "color"])))#
#
ci.terms.graph <- g1.ci.out#
ci.terms.graph[ci.terms.graph$mean<(-15),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr<(-15),"lwr"] <- -15#
ci.terms.graph[ci.terms.graph$upr<(-15),"upr"] <- -15 #
ci.terms.graph[which(ci.terms.graph$mean>10),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr>(10),"lwr"] <- 10 #
ci.terms.graph[ci.terms.graph$upr>(10),"upr"] <- 10
ggplot(data=ci.terms.graph[ (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]) + #
			facet_grid(~group, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]) + #
			facet_wrap(group~., scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]) + #
			facet_wrap(group~, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]) + #
			facet_wrap(group~., scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]) + #
			facet_wrap(group~Effect, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]) + #
			facet_wrap(~group, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
pdf("figures/gam1_sensitivities_Size.pdf", width= 13, height = 8.5)		#
		ggplot(data=ci.terms.graph[ (ci.terms.graph$Effect=="dbh.recon" & ci.terms.graph$x<=50),]) + #
			facet_wrap(~group, scales="free_x") +#
			geom_line(aes(x=x, y=0), linetype="dashed")+#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()
ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2
pdf("figures/gam2_sensitivities_size.pdf", width = 13, height= 8.5)		#
		ggplot(data=g2.ci.out2[g2.ci.out2$Effect == "dbh.recon" & g2.ci.out2$x<=50, ]) + #
			facet_wrap(~group) +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group)) +#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			poster.theme2#
dev.off()
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_wrap(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			#poster.theme2+#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
pdf("figures/gam3_sensitivities_size.pdf", width= 13, height = 8.5)#
		ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_wrap(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			#poster.theme2+#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_wrap(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			#poster.theme2+#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_wrap(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			#poster.theme2+#
			# scale_color_manual(values=colors.use) +#
			# scale_fill_manual(values=colors.use)+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
g3.ci.terms.pred <- post.distns(model.gam=gam3, model.name="harv_mmf_cc.test", n=n, newdata=new.dat, vars=predictors.all, terms=T)#
		g3.ci.out <- g3.ci.terms.pred$ci # separting out the confidence interval #
		g3.ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels#
		g3.ci.out$x <- as.numeric(g3.ci.out$x) # making x numeric; will make factors NA#
		summary(g3.ci.out)#
ci.terms.graph <- g3.ci.out#
ci.terms.graph[ci.terms.graph$mean<(-2.5),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr<(-2.5),"lwr"] <- -2.5#
ci.terms.graph[ci.terms.graph$upr<(-2.5),"upr"] <- -2.5 #
ci.terms.graph[which(ci.terms.graph$mean>2.5),"mean"] <- NA #
ci.terms.graph[ci.terms.graph$lwr>(2.5),"lwr"] <- 2.5 #
ci.terms.graph[ci.terms.graph$upr>(2.5),"upr"] <- 2.5
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_wrap(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			#poster.theme2+#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))
pdf("figures/gam3_sensitivities_size.pdf", width= 13, height = 8.5)#
		ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% "dbh.recon" & ci.terms.graph$x<=50, ]) + #
			facet_wrap(~group.cc, scales="free_x") +#
			geom_ribbon(aes(x=x, ymin=lwr, ymax=upr, fill=group), alpha=0.5) +#
			geom_line(aes(x=x, y=mean, color=group))+#
			#poster.theme2+#
			scale_color_manual(values=colors.use) +#
			scale_fill_manual(values=colors.use)+#
			labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")"))))#
dev.off()
library(mgcv)#
library(ggplot2)#
library(car)#
library(reshape)#
library(dplR)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate_and_BA.csv", header=T)#
#
data.use$group <- data.use$Species#
data.use$group <- recode(data.use$group, "'CAOV' = 'CARYA'; 'CACO' = 'CARYA'; #
  							'CATE' = 'CARYA'; 'ACSAC' = 'ACSA'; 'BEAL' = 'BETULA'; 'BELE' = 'BETULA'; 'QUMU' = 'QUAL'")#
#
data.use$group.plot <- as.factor(paste(data.use$group, data.use$PlotID, sep="."))#
#
data.use$Canopy.Class <- recode(data.use$Canopy.Class, "'C' = 'D'")#
summary(data.use)#
# reducing the amount of data for the test runs#
sites.use <- c("Harvard", "Howland", "Morgan Monroe State Park", "Oak Openings Toledo", "Missouri Ozark")#
#
test <- data.use[data.use$Site %in% sites.use & !is.na(data.use$RW) & !is.na(data.use$BA.inc),]#
summary(test)#
#
test$group.cc <- as.factor(paste(test$group, test$Canopy.Class, sep="."))#
summary(test)#
# Get a list of what predictors & responses I'm using#
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "group", "group.plot", "group.cc")#
#
# Getting rid of observations that have NAs in the important variables#
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]#
#
# Subsetting to a set of species that we have enough data to feel good about#
#species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", "QUAL", "CAOV", "CACO", "CATE", "JUVI", "QUVE", "PCRU", "THOC", "PIST")#
group.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU")#
#
test <- test[test$group %in% group.use,]#
#
summary(test)#
#
par(new=F)#
plot(test[test$TreeID=="MMA003", "BA.inc"]~ test[test$TreeID=="MMA003","Year"], type="l")#
summary(test)#
# Truncatign at 1950#
test <- test[test$Year >= 1950 & test$Year <= 2012,]#
#
tree.rw <- test#
summary(tree.rw)#
#
summary(test)#
save(test, file="processed_data/test_tree_data_1950_2012.Rdata")#
#
sites.rw <- list()#
#
tree.rw$Year <- as.factor(tree.rw$Year)#
#
for(s in unique(tree.rw$Site)){#
	sites.rw[[s]] <- recast(tree.rw[tree.rw$Site==s,c("Year", "TreeID", "RW")], Year ~ TreeID)	#
}#
summary(sites.rw)#
#
save(sites.rw, file="processed_data/sites_rw.Rdata")#
summary(sites.rw[[4]])#
sites.rw#
# Making Indices of all the different sites using a 30 yr cubic smoothing spline#
sites.i <- list()#
#
for(s in names(sites.rw)){#
	sites.i[[s]] <- detrend(sites.rw[[s]][,2:ncol(sites.rw[[s]])], method="Mean")#
}#
summary(sites.i[[1]])#
#
# making chronologies for each site#
#
site.chron <- list()#
#
for(s in names(sites.i)){#
	site.chron[[s]] <- chron(sites.i[[s]][,2:ncol(sites.i[[s]])], prefix = substr(s, 1, 3), prewhiten = T) #
	site.chron[[s]][,"Year"]<- c(1950:2012) #
}#
#
summary(site.chron)#
# Making each site it's own dataframe#
harvard.crn <- as.data.frame(site.chron[[1]])#
#
howland.crn <- as.data.frame(site.chron[[2]])#
#
misso.crn <- as.data.frame(site.chron[[3]])#
#
mmf.crn <- as.data.frame(site.chron[[4]])#
#
oakop.crn <- as.data.frame(site.chron[[5]])#
# Plotting thigns for presentation#
par(cex=2 )#
plot(mmf.crn$Morres ~ mmf.crn$Year, type="l", lwd=5, axes=F, cex=6, col="white")#
abline(h=1,lty="dashed", col="white")#
axis(side =1,tck= 0.05) #
axis(side=2,tck=0.05)#
#
#Plotting out mmfsites#
summary(test)#
#
mmf <- test[test$Site %in% "Morgan Monroe State Park",]#
#
summary(mmf)#
#
for(i in unique(mmf$Year)){#
  mmf[mmf$Year==i,"Mean"] <- mean(mmf[mmf$Year==i,"RW"])#
  mmf[mmf$Year==i,"UB"] <- quantile(mmf[mmf$Year==i,"RW"], 0.975)#
  mmf[mmf$Year==i,"LB"] <- quantile(mmf[mmf$Year==i,"RW"], 0.025)#
}#
#
summary(mmf)#
#
ggplot(data=mmf)+#
  # geom_line(aes(x=Year, y=RW))#
  geom_ribbon(aes(x=Year, ymin=LB, ymax=UB), alpha=0.5, fill="white")+#
  geom_line(aes(x=Year, y=Mean), size=2, color="white")+#
  poster.theme2#
# Merging the residual chronologies back together#
sites.crn <- data.frame(Harvard = harvard.crn[, "Harres"], #
						Howland = howland.crn[,"Howres"], #
						Missouri = misso.crn[,"Misres"],#
						Morgan_Monroe = mmf.crn[,"Morres"], #
						Oak_openings = oakop.crn[,"Oakres"]#
						)#
#
summary(sites.crn)#
# Load in climate data#
#
climate.use <- read.csv("processed_data/climate_growing_season.csv")#
#
summary(climate.use)#
#
climate.use <- climate.use[climate.use$Site %in% sites.use,]#
climate.use <- climate.use[climate.use$Year>=1950 & climate.use$Year <=2012,]#
#
climate.site <- list()#
#
for(s in unique(climate.use$Site)){#
	climate.site[[s]] <- climate.use[climate.use$Site==s,]#
}#
#
summary(climate.site)#
save(climate.site, file="processed_data/sites_use_climate.Rdata")#
class(climate.site[[1]][,"Year"])#
#
head(climate.site[[1]])#
#
summary(climate.site)#
#
harv.clim <- climate.site[["Harvard"]][,c("tmean", "precip")]#
#
how.clim <- climate.site[["Howland"]][,c("tmean", "precip")]#
#
miss.clim <- climate.site[["Missouri Ozark"]][,c("tmean", "precip")]#
#
mmf.clim <- climate.site[["Morgan Monroe State Park"]][,c("tmean", "precip")]#
#
oak.clim <- climate.site[["Oak Openings Toledo"]][,c("tmean", "precip")]#
dim(harv.clim)#
dim(harvard.crn)#
#
# harvard#
harv.cor<- cor(harvard.crn, harv.clim[,c("tmean", "precip")], method="pearson")#
harvard <- data.frame(cor = c(harv.cor[1:2,"tmean"],  harv.cor[1:2,"precip"]),#
					  var = c("tmean", "tmean", "precip", "precip"))#
harvard$type <- c("std", "res")#
harvard$site <- "Harvard" #
# Howland#
how.cor <- cor(howland.crn, how.clim[,c("tmean", "precip")], method="pearson")#
how.cor#
#
howland <- data.frame(cor = c(how.cor[1:2,"tmean"],  how.cor[1:2,"precip"]),#
					  var = c("tmean", "tmean", "precip", "precip"))#
howland$type <- c("std", "res")#
howland$site <- "Howland" #
# Missouri#
mo.cor <- cor(misso.crn, miss.clim[,c("tmean", "precip")], method="pearson")#
mo.cor#
#
missouri <- data.frame(cor = c(mo.cor[1:2,"tmean"],  mo.cor[1:2,"precip"]),#
					  var = c("tmean", "tmean", "precip", "precip"))#
missouri$type <- c("std", "res")#
missouri$site <- "Missouri" #
#
# Morgan Monroe#
mmf.cor <- cor(mmf.crn, mmf.clim[,c("tmean", "precip")], method="pearson")#
mmf.cor#
#
morgan <- data.frame(cor = c(mmf.cor[1:2,"tmean"],  mmf.cor[1:2,"precip"]),#
					  var = c("tmean", "tmean", "precip", "precip"))#
morgan$type <- c("std", "res")#
morgan$site <- "Morgan-Monroe" #
#
# Oak openings#
oakop.cor <- cor(oakop.crn, oak.clim[,c("tmean", "precip")], method="pearson")#
oakop.cor#
#
oakop <- data.frame(cor = c(oakop.cor[1:2,"tmean"],  oakop.cor[1:2,"precip"]),#
					  var = c("tmean", "tmean", "precip", "precip"))#
oakop$type <- c("std", "res")#
oakop$site <- "Oak-Openings" #
#
# Merging standard chronologies into one file#
#
clim.cor <- merge(harvard, howland, all.x=T, all.y=T)#
clim.cor2 <- merge(clim.cor, missouri,all.x=T, all.y=T)#
clim.cor3 <- merge(clim.cor2, morgan,all.x=T, all.y=T)#
clim.cor4 <- merge(clim.cor3, oakop,all.x=T, all.y=T)#
#
summary(clim.cor4)#
clim.cor4$site <- as.factor(clim.cor4$site)#
clim.cor4$type <- as.factor(clim.cor4$type)#
clim.cor4$cor <- as.numeric(clim.cor4$cor)#
#
# Sig value for 61 df = 0.209#
clim.cor4$sig <- ifelse(clim.cor4$cor < -0.246 | clim.cor4$cor > 0.246, "Y", "N")#
clim.cor4$sig <- factor(clim.cor4$sig, levels = c("Y", "N"))#
#
clim.cor4$site <- factor(clim.cor4$site, levels = c("Missouri", "Morgan-Monroe", "Oak-Openings", "Harvard", "Howland"))#
#
clim.cor4$Site <- clim.cor4$site#
clim.cor4$Site <- recode(clim.cor4$Site, "'Missouri' = 'MO'; 'Morgan-Monroe' = 'IN'; 'Oak-Openings' = 'OH'; 'Harvard' = 'MA'; 'Howland' = 'ME'")#
clim.cor4$Site <- factor(clim.cor4$Site, levels = c("MO", "IN", "OH", "MA", "ME"))#
pdf("figures/site_correlations.pdf", width= 13, height = 8.5)#
ggplot(data=clim.cor4[clim.cor4$type=="std",]) + facet_grid(var~. , scales="free_x") +#
	geom_bar(aes(x=Site, y=cor, fill=sig), stat="identity", position="dodge", colour="black") +#
	geom_hline(yintercept=0.209, linetype="dashed") + #
	geom_hline(yintercept=-0.209, linetype="dashed") + 	#
	geom_hline(yintercept=0, linetype="solid") +#
	scale_fill_manual(values= c("green", "grey50")) + #
	poster.theme2#
dev.off()#
#
#######################################################################
# Gettign correlations for all for all of the available climate data data#
#######################################################################
# Loading in climate data#
t.mean <- read.csv("processed_data/ch2_tmean.csv", header=T)#
t.min <- read.csv("processed_data/ch2_tmin.csv", header=T)#
t.max <- read.csv("processed_data/ch2_tmax.csv", header=T)#
precip <- read.csv("processed_data/ch2_precip.csv", header=T)#
summary(t.mean)#
#
# Limiting time frame--1950-2012#
t.mean <- t.mean[t.mean$Year >= 1951 & t.mean$Year <= 2012,]#
t.min <- t.min[t.min$Year >= 1951 & t.min$Year <= 2012,]#
t.max <- t.max[t.max$Year >= 1951 & t.max$Year <= 2012,]#
precip <- precip[precip$Year >= 1951 & precip$Year <= 2012,]#
summary(t.mean)#
summary(t.min)#
summary(t.max)#
summary(precip)#
#
head(t.mean)#
unique(t.mean$Site.Name)#
#
t.mean$Site.Name <- recode(t.mean$Site.Name, "'Missouri Ozark' = 'Missouri'; 'Morgan Monroe State Park'='Morgan_Monroe'; 'Oak Openings Toledo' = 'Oak_openings'")#
#
t.min$Site.Name <- recode(t.min$Site.Name, "'Missouri Ozark' = 'Missouri'; 'Morgan Monroe State Park'='Morgan_Monroe'; 'Oak Openings Toledo' = 'Oak_openings'")#
t.max$Site.Name <- recode(t.max$Site.Name, "'Missouri Ozark' = 'Missouri'; 'Morgan Monroe State Park'='Morgan_Monroe'; 'Oak Openings Toledo' = 'Oak_openings'")#
precip$Site.Name <- recode(precip$Site.Name, "'Missouri Ozark' = 'Missouri'; 'Morgan Monroe State Park'='Morgan_Monroe'; 'Oak Openings Toledo' = 'Oak_openings'")#
# getting the ring widths in a data frame#
summary(sites.crn)#
sites.crn$Year <- site.chron[[1]][,"Year"]#
head(sites.crn)#
sites.crn <- sites.crn[sites.crn$Year > 1950,]
#--------------------------------------------#
# Tmean correlation#
#--------------------------------------------#
#
sites <- c("Harvard", "Howland", "Missouri", "Morgan_Monroe", "Oak_openings")#
#
tmean.corr<-list()#
#
for(i in sites){#
	tmean.corr[[i]] <- cor(sites.crn[,i], t.mean[t.mean$Site.Name %in% i,!names(t.mean) %in% c("Site.Name", "Year")], method="pearson")#
}#
summary(tmean.corr)#
#
# Making each site it's own dataframe#
harvard.tmean <- as.data.frame(tmean.corr[[1]])#
#
harvard.tmean.stack <- stack(harvard.tmean)#
names(harvard.tmean.stack)<- c("cor", "month")#
harvard.tmean.stack$Site <- as.factor("Harvard")#
harvard.tmean.stack$type <- as.factor("tmean")#
#
howland.tmean <- as.data.frame(tmean.corr[[2]])#
#
howland.tmean.stack <- stack(howland.tmean)#
names(howland.tmean.stack)<- c("cor", "month")#
howland.tmean.stack$Site <- as.factor("Howland")#
howland.tmean.stack$type <- as.factor("tmean")#
#
mo.tmean <- as.data.frame(tmean.corr[[3]])#
#
mo.tmean.stack <- stack(mo.tmean)#
names(mo.tmean.stack)<- c("cor", "month")#
mo.tmean.stack$Site <- as.factor("Missouri")#
mo.tmean.stack$type <- as.factor("tmean")#
#
mmf.tmean <- as.data.frame(tmean.corr[[4]])#
#
mmf.tmean.stack <- stack(mmf.tmean)#
names(mmf.tmean.stack)<- c("cor", "month")#
mmf.tmean.stack$Site <- as.factor("MMF")#
mmf.tmean.stack$type <- as.factor("tmean")#
#
oakop.tmean <- as.data.frame(tmean.corr[[5]])#
#
oakop.tmean.stack <- stack(oakop.tmean)#
names(oakop.tmean.stack)<- c("cor", "month")#
oakop.tmean.stack$Site <- as.factor("Oak_openings")#
oakop.tmean.stack$type <- as.factor("tmean")#
#
all.sites.tmean <- rbind(harvard.tmean.stack, howland.tmean.stack, mo.tmean.stack, mmf.tmean.stack, oakop.tmean.stack)#
#
summary(all.sites.tmean)#
#
#--------------------------------------------#
# Tmin correlation#
#--------------------------------------------#
#
sites <- c("Harvard", "Howland", "Missouri", "Morgan_Monroe", "Oak_openings")#
#
tmin.corr<-list()#
#
for(i in sites){#
	tmin.corr[[i]] <- cor(sites.crn[,i], t.min[t.min$Site.Name %in% i,!names(t.min) %in% c("Site.Name", "Year")], method="pearson")#
}#
summary(tmin.corr)#
#
# Making each site it's own dataframe#
harvard.tmin <- as.data.frame(tmin.corr[[1]])#
#
harvard.tmin.stack <- stack(harvard.tmin)#
names(harvard.tmin.stack)<- c("cor", "month")#
harvard.tmin.stack$Site <- as.factor("Harvard")#
harvard.tmin.stack$type <- as.factor("tmin")#
#
howland.tmin <- as.data.frame(tmin.corr[[2]])#
#
howland.tmin.stack <- stack(howland.tmin)#
names(howland.tmin.stack)<- c("cor", "month")#
howland.tmin.stack$Site <- as.factor("Howland")#
howland.tmin.stack$type <- as.factor("tmin")#
#
mo.tmin <- as.data.frame(tmin.corr[[3]])#
#
mo.tmin.stack <- stack(mo.tmin)#
names(mo.tmin.stack)<- c("cor", "month")#
mo.tmin.stack$Site <- as.factor("Missouri")#
mo.tmin.stack$type <- as.factor("tmin")#
#
mmf.tmin <- as.data.frame(tmin.corr[[4]])#
#
mmf.tmin.stack <- stack(mmf.tmin)#
names(mmf.tmin.stack)<- c("cor", "month")#
mmf.tmin.stack$Site <- as.factor("MMF")#
mmf.tmin.stack$type <- as.factor("tmin")#
#
oakop.tmin <- as.data.frame(tmin.corr[[5]])#
#
oakop.tmin.stack <- stack(oakop.tmin)#
names(oakop.tmin.stack)<- c("cor", "month")#
oakop.tmin.stack$Site <- as.factor("Oak_openings")#
oakop.tmin.stack$type <- as.factor("tmin")#
#
all.sites.tmin <- rbind(harvard.tmin.stack, howland.tmin.stack, mo.tmin.stack, mmf.tmin.stack, oakop.tmin.stack)#
#
summary(all.sites.tmin)#
#--------------------------------------------#
# Tmax correlation#
#--------------------------------------------#
#
sites <- c("Harvard", "Howland", "Missouri", "Morgan_Monroe", "Oak_openings")#
#
tmax.corr<-list()#
#
for(i in sites){#
	tmax.corr[[i]] <- cor(sites.crn[,i], t.max[t.max$Site.Name %in% i,!names(t.max) %in% c("Site.Name", "Year")], method="pearson")#
}#
summary(tmax.corr)#
#
# Making each site it's own dataframe#
harvard.tmax <- as.data.frame(tmax.corr[[1]])#
#
harvard.tmax.stack <- stack(harvard.tmax)#
names(harvard.tmax.stack)<- c("cor", "month")#
harvard.tmax.stack$Site <- as.factor("Harvard")#
harvard.tmax.stack$type <- as.factor("tmax")#
#
howland.tmax <- as.data.frame(tmax.corr[[2]])#
#
howland.tmax.stack <- stack(howland.tmax)#
names(howland.tmax.stack)<- c("cor", "month")#
howland.tmax.stack$Site <- as.factor("Howland")#
howland.tmax.stack$type <- as.factor("tmax")#
#
mo.tmax <- as.data.frame(tmax.corr[[3]])#
#
mo.tmax.stack <- stack(mo.tmax)#
names(mo.tmax.stack)<- c("cor", "month")#
mo.tmax.stack$Site <- as.factor("Missouri")#
mo.tmax.stack$type <- as.factor("tmax")#
#
mmf.tmax <- as.data.frame(tmax.corr[[4]])#
#
mmf.tmax.stack <- stack(mmf.tmax)#
names(mmf.tmax.stack)<- c("cor", "month")#
mmf.tmax.stack$Site <- as.factor("MMF")#
mmf.tmax.stack$type <- as.factor("tmax")#
#
oakop.tmax <- as.data.frame(tmax.corr[[5]])#
#
oakop.tmax.stack <- stack(oakop.tmax)#
names(oakop.tmax.stack)<- c("cor", "month")#
oakop.tmax.stack$Site <- as.factor("Oak_openings")#
oakop.tmax.stack$type <- as.factor("tmax")#
#
all.sites.tmax <- rbind(harvard.tmax.stack, howland.tmax.stack, mo.tmax.stack, mmf.tmax.stack, oakop.tmax.stack)#
#
summary(all.sites.tmax)#
#--------------------------------------------#
# Precip correlation#
#--------------------------------------------#
sites <- c("Harvard", "Howland", "Missouri", "Morgan_Monroe", "Oak_openings")#
#
precip.corr<-list()#
#
for(i in sites){#
	precip.corr[[i]] <- cor(sites.crn[,i], precip[precip$Site.Name %in% i,!names(precip) %in% c("Site.Name", "Year")], method="pearson")#
}#
summary(precip.corr)#
#
# Making each site it's own dataframe#
harvard.precip <- as.data.frame(precip.corr[[1]])#
#
harvard.precip.stack <- stack(harvard.precip)#
names(harvard.precip.stack)<- c("cor", "month")#
harvard.precip.stack$Site <- as.factor("Harvard")#
harvard.precip.stack$type <- as.factor("precip")#
#
howland.precip <- as.data.frame(precip.corr[[2]])#
#
howland.precip.stack <- stack(howland.precip)#
names(howland.precip.stack)<- c("cor", "month")#
howland.precip.stack$Site <- as.factor("Howland")#
howland.precip.stack$type <- as.factor("precip")#
#
mo.precip <- as.data.frame(precip.corr[[3]])#
#
mo.precip.stack <- stack(mo.precip)#
names(mo.precip.stack)<- c("cor", "month")#
mo.precip.stack$Site <- as.factor("Missouri")#
mo.precip.stack$type <- as.factor("precip")#
#
mmf.precip <- as.data.frame(precip.corr[[4]])#
#
mmf.precip.stack <- stack(mmf.precip)#
names(mmf.precip.stack)<- c("cor", "month")#
mmf.precip.stack$Site <- as.factor("MMF")#
mmf.precip.stack$type <- as.factor("precip")#
#
oakop.precip <- as.data.frame(precip.corr[[5]])#
#
oakop.precip.stack <- stack(oakop.precip)#
names(oakop.precip.stack)<- c("cor", "month")#
oakop.precip.stack$Site <- as.factor("Oak_openings")#
oakop.precip.stack$type <- as.factor("precip")#
#
all.sites.precip <- rbind(harvard.precip.stack, howland.precip.stack, mo.precip.stack, mmf.precip.stack, oakop.precip.stack)#
#
summary(all.sites.precip)#
#
# Merging all stacked dataframes together to make plotting easier#
#
all.sites.climate <- rbind(all.sites.precip, all.sites.tmax, all.sites.tmin, all.sites.tmean)#
summary(all.sites.climate)#
#
# Sig value for 61 df = 0.209#
all.sites.climate$sig <- ifelse(all.sites.climate$cor < -0.25 | all.sites.climate$cor > 0.25, "Y", "N")#
all.sites.climate$sig <- factor(all.sites.climate$sig, levels = c("Y", "N"))#
all.sites.climate$month <- factor(all.sites.climate$month, levels = c("pJan", "pFeb", "pMar", "pApr", "pMay", "pJun", "pJul", "pAug", "pSep", "pOct", "pNov", "pDec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "pfall", "winter", "spring", "summer", "grow.seas"))#
#
all.sites.climate$Site <- factor(all.sites.climate$Site, levels = c("Missouri", "MMF", "Oak_openings", "Harvard", "Howland"))
ggplot(data=all.sites.climate) + facet_grid(Site ~ type ) +#
	geom_bar(aes(x=month, y=cor, fill=sig), stat="identity", position="dodge", colour="black") +#
	geom_hline(yintercept=0.25, linetype="dashed") + #
	geom_hline(yintercept=-0.25, linetype="dashed") + 	#
	geom_hline(yintercept=0, linetype="solid") +#
	scale_fill_manual(values= c("green", "grey50"))+#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary(all.sites.climate)
unique(all.sites.climate$month)
ggplot(data=all.sites.climate[all.sites.climate %in% c("pOct, pNov, pDec, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, pfall, winter,spring, summer, grow.seas")]) + facet_grid(Site ~ type ) +#
	geom_bar(aes(x=month, y=cor, fill=sig), stat="identity", position="dodge", colour="black") +#
	geom_hline(yintercept=0.25, linetype="dashed") + #
	geom_hline(yintercept=-0.25, linetype="dashed") + 	#
	geom_hline(yintercept=0, linetype="solid") +#
	scale_fill_manual(values= c("green", "grey50"))+#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=all.sites.climate[all.sites.climate %in% c("pOct, pNov, pDec, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, pfall, winter,spring, summer, grow.seas"),]) + facet_grid(Site ~ type ) +#
	geom_bar(aes(x=month, y=cor, fill=sig), stat="identity", position="dodge", colour="black") +#
	geom_hline(yintercept=0.25, linetype="dashed") + #
	geom_hline(yintercept=-0.25, linetype="dashed") + 	#
	geom_hline(yintercept=0, linetype="solid") +#
	scale_fill_manual(values= c("green", "grey50"))+#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))
all.sites.climate[all.sites.climate %in% c("pOct, pNov, pDec, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, pfall, winter,spring, summer, grow.seas"),]
ggplot(data=all.sites.climate[all.sites.climate$month %in% c("pOct, pNov, pDec, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, pfall, winter,spring, summer, grow.seas"),]) + facet_grid(Site ~ type ) +#
	geom_bar(aes(x=month, y=cor, fill=sig), stat="identity", position="dodge", colour="black") +#
	geom_hline(yintercept=0.25, linetype="dashed") + #
	geom_hline(yintercept=-0.25, linetype="dashed") + 	#
	geom_hline(yintercept=0, linetype="solid") +#
	scale_fill_manual(values= c("green", "grey50"))+#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))
all.sites.climate[all.sites.climate$month %in% c("pOct, pNov, pDec, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, pfall, winter,spring, summer, grow.seas"),]
ggplot(data=all.sites.climate) + facet_grid(Site ~ type ) +#
	geom_bar(aes(x=month, y=cor, fill=sig), stat="identity", position="dodge", colour="black") +#
	geom_hline(yintercept=0.25, linetype="dashed") + #
	geom_hline(yintercept=-0.25, linetype="dashed") + 	#
	geom_hline(yintercept=0, linetype="solid") +#
	scale_fill_manual(values= c("green", "grey50"))+#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=all.sites.climate[all.sites.climate$month %in% c("pOct", "pNov"),]) + facet_grid(Site ~ type ) +#
	geom_bar(aes(x=month, y=cor, fill=sig), stat="identity", position="dodge", colour="black") +#
	geom_hline(yintercept=0.25, linetype="dashed") + #
	geom_hline(yintercept=-0.25, linetype="dashed") + 	#
	geom_hline(yintercept=0, linetype="solid") +#
	scale_fill_manual(values= c("green", "grey50"))+#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=all.sites.climate[all.sites.climate$month %in% c("pOct", "pNov", "pDec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "spring", "summer", "pfall", "winter", "grow.seas"),]) + facet_grid(Site ~ type ) +#
	geom_bar(aes(x=month, y=cor, fill=sig), stat="identity", position="dodge", colour="black") +#
	geom_hline(yintercept=0.25, linetype="dashed") + #
	geom_hline(yintercept=-0.25, linetype="dashed") + 	#
	geom_hline(yintercept=0, linetype="solid") +#
	scale_fill_manual(values= c("green", "grey50"))+#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))
pdf("figures/site_correlations_allmonths_short.pdf", width= 13, height = 8.5)#
ggplot(data=all.sites.climate[all.sites.climate$month %in% c("pOct", "pNov", "pDec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "spring", "summer", "pfall", "winter", "grow.seas"),]) + facet_grid(Site ~ type ) +#
	geom_bar(aes(x=month, y=cor, fill=sig), stat="identity", position="dodge", colour="black") +#
	geom_hline(yintercept=0.25, linetype="dashed") + #
	geom_hline(yintercept=-0.25, linetype="dashed") + 	#
	geom_hline(yintercept=0, linetype="solid") +#
	scale_fill_manual(values= c("green", "grey50"))+#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))#
dev.off()
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}
##################################################################################################
# Loading up .csv file that has meta data and RWL files for ring widths#
# Also doing some housekeeping (unit conversions, name formats) up front to make the workflow smoother#
##################################################################################################
#
#load in core details data sheet.  Has living/dead, pith info, measurement info.#
#loading the dplR to use the basal area reconstruction functions.#
core.data <- read.csv("raw_input_files/DOE_AllSites_core_data.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
summary(core.data)
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
##################################################################################################
# Loading up .csv file that has meta data and RWL files for ring widths#
# Also doing some housekeeping (unit conversions, name formats) up front to make the workflow smoother#
##################################################################################################
#
#load in core details data sheet.  Has living/dead, pith info, measurement info.#
#loading the dplR to use the basal area reconstruction functions.#
core.data <- read.csv("raw_input_files/DOE_AllSites_core_data.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
summary(core.data)#
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)#
#
#importing the diameter files of all trees sampled: includes tree id, spp, plot assignment, and DBH #
tree.data <- read.csv("raw_input_files/DOE_AllSitesTreeData.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#
summary(tree.data)
###################################################################
# Importing ring widths#
###################################################################
# Load in Ross DOE ring widths from the east#
# importing ring widths of dated samples #
#
tree.rw <- read.csv("raw_input_files/DOE_AllSites_Gapfilled.csv", header=T)#
#
summary(tree.rw)
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}
core.data <- read.csv("processed_data/DOE_core_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
summary(core.data)
###################################################################################
# DBH Reconstruction#
###################################################################################
library(reshape)#
# ---------------------------------------#
# DBH..cm. Reconstruction#
# ---------------------------------------#
# Tree Data#
tree.data <- read.csv("processed_data/DOE_AllsitesTreeData.csv")#
tree.data <- tree.data[!tree.data$Site=="Howland",]#
summary(tree.data)#
#
har.how.tree.data <- read.csv("raw_input_files/harvard_howland_may2016_tree_metadata.csv", header=T) #
#
dim(tree.data)#
dim(har.how.tree.data[har.how.tree.data$Site=="Howland",])#
tree.data2 <- merge(tree.data, har.how.tree.data[har.how.tree.data$Site=="Howland",], all.x=T, all.y=T)#
dim(tree.data2)#
#
tree.data <- tree.data2#
summary(tree.data)#
#
# Site Data (for year cored) #
Site.data <- read.csv("raw_input_files/DOE_plus_valles.csv", na.strings="")#
Site.data$Year.sample <- as.numeric(substr(Site.data$date.sample,7,10))#
summary(Site.data)#
#
# merging in the year sampled into the tree data & calculating age#
tree.data <- merge(tree.data, Site.data[,c("PlotID", "Year.sample")], all.x=T, all.y=F)#
tree.data$Age <- tree.data$Year.sample - tree.data$Pith#
summary(tree.data)#
#
write.csv(tree.data, file="processed_data/DOE_tree_data_may2016_update.csv", row.names=F)#
core.data <- read.csv("processed_data/core_data.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
summary(core.data)#
#
names(core.data) <- c("CoreID", "TreeID", "plot.id", "Site", "tree.number", "Species", "Canopy.Class", "Live.Dead", "DBH..cm.", "stems", "total.cores", "core.id", "pith.preset", "pith.yr", "inner.present", "inner.measured", "outer.measured", "bark.present", "inner.dated", "outer.dated", "dated", "Notes", "zombie", "plot")#
#
core.data <- core.data[!core.data$Site=="Howland",]#
#adding a column include which plot at the Site the trees belong to#
#
har.how.core.data <- read.csv("processed_data/HARV_how_may2016_core_data.csv", header=T)#
summary(har.how.core.data)#
#
names(har.how.core.data)#
#
core.data2 <- merge(core.data, har.how.core.data[har.how.core.data$Site=="Howland",], all.x=T, all.y=T)#
summary(core.data2)#
dim(core.data)#
dim(har.how.core.data[har.how.core.data$Site=="Howland",])#
dim(core.data2)#
#
cores.data <- core.data2
core.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_core_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)
summary(core.data)
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)
write.csv(core.data, file="~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_tree_data_may2016_update.csv", row.names=F)
#load in core details data sheet.  Has living/dead, pith info, measurement info.#
#loading the dplR to use the basal area reconstruction functions.#
core.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_core_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
summary(core.data)#
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
##################################################################################################
# Loading up .csv file that has meta data and RWL files for ring widths#
# Also doing some housekeeping (unit conversions, name formats) up front to make the workflow smoother#
##################################################################################################
#
#load in core details data sheet.  Has living/dead, pith info, measurement info.#
#loading the dplR to use the basal area reconstruction functions.#
core.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_core_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
summary(core.data)
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)
tree.data <- read.csv("raw_input_files/DOE_AllSitesTreeData.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)
tree.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_tree_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)
write.csv(tree.data, file="processed_data/tree_data/csv")
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
##################################################################################################
# Loading up .csv file that has meta data and RWL files for ring widths#
# Also doing some housekeeping (unit conversions, name formats) up front to make the workflow smoother#
##################################################################################################
#
#load in core details data sheet.  Has living/dead, pith info, measurement info.#
#loading the dplR to use the basal area reconstruction functions.#
core.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_core_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
summary(core.data)
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)
#importing the diameter files of all trees sampled: includes tree id, spp, plot assignment, and DBH #
tree.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_tree_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)
write.csv(tree.data, file="processed_data/tree_data/csv")
write.csv(tree.data, file="processed_data/tree_data.csv", row.names=F)
summary(tree.data)
tree.rw <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_AllSites_may2016_Gapfilled.csv", header=T)
summary(tree.rw)
dbh.recon <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_Allsites_may2016_updateGapFilling_DBHrecon_ALL.csv", header=T, row.names=1)
write.csv(tree.rw, file="processed_data/tree_rw.csv", row.names=F)
write.csv(dbh.recon, file="processed_data/dbh_recon.csv", row.names=F)
summary(dbh.recon)#
row.names(dbh.recon)#
dbh.recon.stack <- stack(dbh.recon)#
summary(dbh.recon.stack)#
names(dbh.recon.stack) <- c("dbh.recon", "TreeID")#
dbh.recon.stack$Year <- as.numeric(paste(row.names(dbh.recon)))#
summary(tree.rw)#
#
data.use <- merge(tree.rw, dbh.recon.stack, all.x=T, all.y=F) #
summary(data.use)
write.csv(data.use, "processed_data/tree_data_use.csv", row.names=F)
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
#
# Loading in climate data from the PRISM extracts#
t.mean <- read.csv("climate_data/prism_met_sites_wide_tmean.csv", header=T)#
precip <- read.csv("climate_data/prism_met_sites_wide_ppt.csv", header=T)#
t.min <- read.csv("climate_data/prism_met_sites_wide_tmin.csv", header=T)#
t.max <- read.csv("climate_data/prism_met_sites_wide_tmax.csv", header=T)#
summary(t.mean)#
#
# We have Harvard P1 and Harvard P2 as separate sites#
#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.mean$Site.Name <- as.factor(ifelse(t.mean$Site.Name %in% harvard, "Harvard", paste(t.mean$Site.Name)))#
summary(t.mean)#
#
t.mean2 <- aggregate(t.mean[,3:ncol(t.mean)], by=t.mean[,c("Site.Name", "Year")], FUN=mean)#
# summary(t.mean2)#
#
t.mean2$grow.seas <- rowMeans(t.mean2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
t.mean2$pfall <- rowMeans(t.mean2[,c("pSep", "pOct", "pNov")])#
t.mean2$winter <- rowMeans(t.mean2[,c("pDec", "Jan", "Feb")])#
t.mean2$spring <- rowMeans(t.mean2[,c("Mar", "Apr", "May")])#
t.mean2$summer <- rowMeans(t.mean2[,c("Jun", "Jul", "Aug")])#
summary(t.mean2)#
write.csv(t.mean2, file="processed_data/ch2_tmean.csv", row.names=F)#
#
# Precip#
precip$Site.Name <- as.factor(ifelse(precip$Site.Name %in% harvard, "Harvard", paste(precip$Site.Name)))#
summary(precip)#
#
precip2 <- aggregate(precip[,3:ncol(precip)], by=precip[,c("Site.Name", "Year")], FUN=mean)#
summary(precip2)#
#
precip2$grow.seas <- rowSums(precip2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
precip2$pfall <- rowMeans(precip2[,c("pSep", "pOct", "pNov")])#
precip2$winter <- rowMeans(precip2[,c("pDec", "Jan", "Feb")])#
precip2$spring <- rowMeans(precip2[,c("Mar", "Apr", "May")])#
precip2$summer <- rowMeans(precip2[,c("Jun", "Jul", "Aug")])#
summary(precip2)#
write.csv(precip2, file="processed_data/ch2_precip.csv", row.names=F)#
#####################################################
# making a file with just the growing season data#
#####################################################
climate.use <- data.frame(Site = t.mean2$Site.Name,#
						  tmean = t.mean2$grow.seas,#
						  precip = precip2$grow.seas,#
						  Year = t.mean2$Year)#
summary(climate.use)#
#
write.csv(climate.use, file="processed_data/climate_growing_season.csv", row.names=F)						  #
#####################################################
# Combining my data.use from script #1 to this set of climate data#
#####################################################
#
data.use <- read.csv("processed_data/tree_data_use.csv", header=T)#
summary(data.use)#
dim(data.use)#
summary(climate.use)#
dim(climate.use)#
#
unique(data.use$Site)#
unique(climate.use$Site)#
#
data.use2 <- merge(data.use, climate.use, all.x=T, all.y=T)#
dim(data.use2)#
summary(data.use2)#
#
# taking onlt the trees that dated so that we don't have any gapfilled data in the analysis#
data.use2 <- data.use2[data.use2$Dated=="Y" & !is.na(data.use2$Dated),]#
summary(data.use2)#
#
write.csv(data.use2, file="processed_data/AllSites_tree_plus_climate.csv", row.names=F)#
#####################################################
# Making a data frame that has months and seasons broken down so we can determine the critical climate period for each site#
#####################################################
summary(t.mean2)#
summary(precip2)#
#
# Minimum temp#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.min$Site.Name <- as.factor(ifelse(t.min$Site.Name %in% harvard, "Harvard", paste(t.min$Site.Name)))#
summary(t.min)#
t.min2 <- aggregate(t.min[,3:ncol(t.min)], by=t.min[,c("Site.Name", "Year")], FUN=mean)#
# summary(t.min2)#
#
t.min2$grow.seas <- rowMeans(t.min2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
t.min2$pfall <- rowMeans(t.min2[,c("pSep", "pOct", "pNov")])#
t.min2$winter <- rowMeans(t.min2[,c("pDec", "Jan", "Feb")])#
t.min2$spring <- rowMeans(t.min2[,c("Mar", "Apr", "May")])#
t.min2$summer <- rowMeans(t.min2[,c("Jun", "Jul", "Aug")])#
summary(t.min2)#
write.csv(t.min2, file="processed_data/ch2_tmin.csv", row.names=F)#
#
# Maximum temp#
#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.max$Site.Name <- as.factor(ifelse(t.max$Site.Name %in% harvard, "Harvard", paste(t.max$Site.Name)))#
summary(t.max)#
#
t.max2 <- aggregate(t.max[,3:ncol(t.max)], by=t.max[,c("Site.Name", "Year")], FUN=mean)#
# summary(t.max2)#
#
t.max2$grow.seas <- rowMeans(t.max2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
t.max2$pfall <- rowMeans(t.max2[,c("pSep", "pOct", "pNov")])#
t.max2$winter <- rowMeans(t.max2[,c("pDec", "Jan", "Feb")])#
t.max2$spring <- rowMeans(t.max2[,c("Mar", "Apr", "May")])#
t.max2$summer <- rowMeans(t.max2[,c("Jun", "Jul", "Aug")])#
write.csv(t.max2, file="processed_data/ch2_tmax.csv", row.names=F)
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)#
summary(data.use)#
#
# Calculating basal area increment to use as our response variable#
# first lets calcualte basal area#
#
data.use$BA <- pi*(data.use$dbh.recon/2)^2#
#
for(t in unique(data.use$TreeID)){#
	# if(min(data.use[data.use$TreeID, "BA"], na.rm=T))#
	if(length(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"])<=1) next # skip things that don't have more than 1 year#
	for(y in min(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"]) : (max(data.use[data.use$TreeID==t & !is.na(data.use$BA),"Year"])-1) ){#
		data.use[data.use$TreeID==t & data.use$Year==y,"BA.inc"] <- data.use[data.use$TreeID==t & data.use$Year==y+1,"BA"] -#
		 					data.use[data.use$TreeID==t & data.use$Year==y,"BA"]		#
	}#
}#
#
write.csv(data.use, "processed_data/AllSites_tree_plus_climate_and_BA.csv", row.names=F)
library(mgcv)#
library(ggplot2)#
library(car)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate_and_BA.csv", header=T)
# Calculating BAI for the DOE sites#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)#
summary(data.use)#
#
# Calculating basal area increment to use as our response variable#
# first lets calcualte basal area#
#
data.use$BA <- pi*(data.use$dbh.recon/2)^2#
#
for(t in unique(data.use$TreeID)){#
	# if(min(data.use[data.use$TreeID, "BA"], na.rm=T))#
	if(length(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"])<=1) next # skip things that don't have more than 1 year#
	for(y in min(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"]) : (max(data.use[data.use$TreeID==t & !is.na(data.use$BA),"Year"])-1) ){#
		data.use[data.use$TreeID==t & data.use$Year==y,"BA.inc"] <- data.use[data.use$TreeID==t & data.use$Year==y+1,"BA"] -#
		 					data.use[data.use$TreeID==t & data.use$Year==y,"BA"]		#
	}#
}
library(mgcv)#
library(ggplot2)#
library(car)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate_and_BA.csv", header=T)#
#
data.use$group <- data.use$Species#
data.use$group <- recode(data.use$group, "'CAOV' = 'CARYA'; 'CACO' = 'CARYA'; #
  							'CATE' = 'CARYA'; 'ACSAC' = 'ACSA'; 'BEAL' = 'BETULA'; 'BELE' = 'BETULA'; 'QUMU' = 'QUAL'")#
#
data.use$group.plot <- as.factor(paste(data.use$group, data.use$PlotID, sep="."))#
#
data.use$Canopy.Class <- recode(data.use$Canopy.Class, "'C' = 'D'")#
summary(data.use)#
# reducing the amount of data for the test runs#
sites.use <- c("Harvard", "Howland", "Morgan Monroe State Park", "Oak Openings Toledo", "Missouri Ozark")#
#
test <- data.use[data.use$Site %in% sites.use & !is.na(data.use$RW) & !is.na(data.use$BA.inc),]#
summary(test)#
#
test$group.cc <- as.factor(paste(test$group, test$Canopy.Class, sep="."))#
summary(test)
# Get a list of what predictors & responses I'm using#
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "group", "group.plot", "group.cc") #
#
# Getting rid of observations that have NAs in the important variables#
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]#
#
# Subsetting to a set of species that we have enough data to feel good about#
#species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", "QUAL", "CAOV", "CACO", "CATE", "JUVI", "QUVE", "PCRU", "THOC", "PIST")#
group.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU")#
#
test <- test[test$group %in% group.use,]#
#
summary(test)#
#
par(new=F)#
plot(test[test$TreeID=="MMA003", "BA.inc"]~ test[test$TreeID=="MMA003","Year"], type="l")#
test$log.dbh <- log(test$dbh.recon)#
summary(test)#
#
summary(test)#
summary(test$Live.Dead)#
summary(test$Canopy.Class)
# Get a list of what predictors & responses I'm using#
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "group", "group.plot", "group.cc")
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]
group.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU")
test <- test[test$group %in% group.use,]
summary(test)
par(new=F)
plot(test[test$TreeID=="MMA003", "BA.inc"]~ test[test$TreeID=="MMA003","Year"], type="l")
test[test$TreeID=="HOW1002", "BA.inc"]
write.csv(data.use, "processed_data/AllSites_tree_plus_climate_and_BA.csv", row.names=F)
# Calculating BAI for the DOE sites#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)#
summary(data.use)#
#
# Calculating basal area increment to use as our response variable#
# first lets calcualte basal area#
#
data.use$BA <- pi*(data.use$dbh.recon/2)^2#
#
for(t in unique(data.use$TreeID)){#
	# if(min(data.use[data.use$TreeID, "BA"], na.rm=T))#
	if(length(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"])<=1) next # skip things that don't have more than 1 year#
	for(y in min(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"]) : (max(data.use[data.use$TreeID==t & !is.na(data.use$BA),"Year"])-1) ){#
		data.use[data.use$TreeID==t & data.use$Year==y,"BA.inc"] <- data.use[data.use$TreeID==t & data.use$Year==y+1,"BA"] -#
		 					data.use[data.use$TreeID==t & data.use$Year==y,"BA"]		#
	}#
}
write.csv(data.use, "processed_data/AllSites_tree_plus_climate_and_BA.csv", row.names=F)
library(mgcv)#
library(ggplot2)#
library(car)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate_and_BA.csv", header=T)
data.use$group <- data.use$Species#
data.use$group <- recode(data.use$group, "'CAOV' = 'CARYA'; 'CACO' = 'CARYA'; #
  							'CATE' = 'CARYA'; 'ACSAC' = 'ACSA'; 'BEAL' = 'BETULA'; 'BELE' = 'BETULA'; 'QUMU' = 'QUAL'")
data.use$group.plot <- as.factor(paste(data.use$group, data.use$PlotID, sep="."))
data.use$Canopy.Class <- recode(data.use$Canopy.Class, "'C' = 'D'")#
summary(data.use)
# reducing the amount of data for the test runs#
sites.use <- c("Harvard", "Howland", "Morgan Monroe State Park", "Oak Openings Toledo", "Missouri Ozark")#
#
test <- data.use[data.use$Site %in% sites.use & !is.na(data.use$RW) & !is.na(data.use$BA.inc),]#
summary(test)#
#
test$group.cc <- as.factor(paste(test$group, test$Canopy.Class, sep="."))#
summary(test)
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "group", "group.plot", "group.cc")
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]
# Subsetting to a set of species that we have enough data to feel good about#
#species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", "QUAL", "CAOV", "CACO", "CATE", "JUVI", "QUVE", "PCRU", "THOC", "PIST")#
group.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU")
test <- test[test$group %in% group.use,]#
#
summary(test)
plot(test[test$TreeID=="HOW1002", "BA.inc"]~ test[test$TreeID=="MMA003","Year"], type="l")
plot(test[test$TreeID=="HOW1002", "BA.inc"]~ test[test$TreeID=="HOW1002","Year"], type="l")
par(new=F)#
plot(test[test$TreeID=="HOW1002", "BA.inc"]~ test[test$TreeID=="HOW1002","Year"], type="l")
summary(test)
plot(test[test$TreeID=="HOW1002", "BA.inc"]~ test[test$TreeID=="HOW1002","Year"], type="l", xlim=c(1900,2014))
plot(test[test$TreeID=="HOW1002", "BA.inc"]~ test[test$TreeID=="HOW1002","Year"], type="l", xlim=c(1900,2014), ylim=range(test$BA.inc))
summary(test[test$TreeID=="HOW1002",])
summary(test)
plot(test[test$TreeID=="HOW1082", "BA.inc"]~ test[test$TreeID=="HOW1082","Year"], type="l")
core.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_core_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
summary(core.data)
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)#
#
#importing the diameter files of all trees sampled: includes tree id, spp, plot assignment, and DBH #
tree.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_tree_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#
write.csv(tree.data, file="processed_data/tree_data.csv", row.names=F)#
#
summary(tree.data)
tree.rw <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_AllSites_may2016_Gapfilled.csv", header=T)#
#
write.csv(tree.rw, file="processed_data/tree_rw.csv", row.names=F)#
#
summary(tree.rw)
dbh.recon <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_Allsites_may2016_updateGapFilling_DBHrecon_ALL.csv", header=T, row.names=1)#
write.csv(dbh.recon, file="processed_data/dbh_recon.csv", row.names=F)#
#
summary(dbh.recon)#
row.names(dbh.recon)
head(dbh.recon)
head(tree.rw)
dbh.recon.stack <- stack(dbh.recon)
summary(dbh.recon.stack)
summary(dbh.recon.stack[dbh.recon.stack$values<0,])
names(dbh.recon.stack) <- c("dbh.recon", "TreeID")
dbh.recon.stack$Year <- as.numeric(paste(row.names(dbh.recon)))
summary(tree.rw)
dim(dbh.recon)
dim(tree.rw)
data.use <- merge(tree.rw, dbh.recon.stack, all.x=T, all.y=F)
summary(data.use)
plot(dbh.recon[dbh.recon$TreeID=="HOW1056"])
row.names(dbh.recon)
plot(data.use[data.yse$sTreeID=="HOW1056", "dbh.recon"] ~ data.use[data.yse$sTreeID=="HOW1056", "Year"], type="l")
plot(data.use[data.use$sTreeID=="HOW1056", "dbh.recon"] ~ data.use[data.use$sTreeID=="HOW1056", "Year"], type="l")
library(mgcv)#
library(ggplot2)#
library(car)#
# Christy's GAMM code#
#
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data) #
#
# Loading in my data#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate_and_BA.csv", header=T)#
#
data.use$group <- data.use$Species#
data.use$group <- recode(data.use$group, "'CAOV' = 'CARYA'; 'CACO' = 'CARYA'; #
  							'CATE' = 'CARYA'; 'ACSAC' = 'ACSA'; 'BEAL' = 'BETULA'; 'BELE' = 'BETULA'; 'QUMU' = 'QUAL'")#
#
data.use$group.plot <- as.factor(paste(data.use$group, data.use$PlotID, sep="."))#
#
data.use$Canopy.Class <- recode(data.use$Canopy.Class, "'C' = 'D'")#
summary(data.use)#
# reducing the amount of data for the test runs#
sites.use <- c("Harvard", "Howland", "Morgan Monroe State Park", "Oak Openings Toledo", "Missouri Ozark")#
#
test <- data.use[data.use$Site %in% sites.use & !is.na(data.use$RW) & !is.na(data.use$BA.inc),]#
summary(test)#
#
test$group.cc <- as.factor(paste(test$group, test$Canopy.Class, sep="."))#
summary(test)#
# Get a list of what predictors & responses I'm using#
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "group", "group.plot", "group.cc") #
#
# Getting rid of observations that have NAs in the important variables#
test <- test[complete.cases(test[,predictors.all]),]#
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]#
#
# Subsetting to a set of species that we have enough data to feel good about#
#species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", "QUAL", "CAOV", "CACO", "CATE", "JUVI", "QUVE", "PCRU", "THOC", "PIST")#
group.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU")#
#
test <- test[test$group %in% group.use,]#
#
summary(test)#
#
par(new=F)#
plot(test[test$TreeID=="HOW1082", "BA.inc"]~ test[test$TreeID=="HOW1082","Year"], type="l")#
test$log.dbh <- log(test$dbh.recon)#
summary(test)
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)
summary(data.use)
sumary(data.use[data.use$dbh.recon > 200,])
summary(data.use[data.use$dbh.recon > 200,])
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
#
# Loading in climate data from the PRISM extracts#
t.mean <- read.csv("climate_data/prism_met_sites_wide_tmean.csv", header=T)#
precip <- read.csv("climate_data/prism_met_sites_wide_ppt.csv", header=T)#
t.min <- read.csv("climate_data/prism_met_sites_wide_tmin.csv", header=T)#
t.max <- read.csv("climate_data/prism_met_sites_wide_tmax.csv", header=T)#
summary(t.mean)#
#
# We have Harvard P1 and Harvard P2 as separate sites#
#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.mean$Site.Name <- as.factor(ifelse(t.mean$Site.Name %in% harvard, "Harvard", paste(t.mean$Site.Name)))#
summary(t.mean)#
#
t.mean2 <- aggregate(t.mean[,3:ncol(t.mean)], by=t.mean[,c("Site.Name", "Year")], FUN=mean)#
# summary(t.mean2)#
#
t.mean2$grow.seas <- rowMeans(t.mean2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
t.mean2$pfall <- rowMeans(t.mean2[,c("pSep", "pOct", "pNov")])#
t.mean2$winter <- rowMeans(t.mean2[,c("pDec", "Jan", "Feb")])#
t.mean2$spring <- rowMeans(t.mean2[,c("Mar", "Apr", "May")])#
t.mean2$summer <- rowMeans(t.mean2[,c("Jun", "Jul", "Aug")])
summary(t.mean2)#
write.csv(t.mean2, file="processed_data/ch2_tmean.csv", row.names=F)#
#
# Precip#
precip$Site.Name <- as.factor(ifelse(precip$Site.Name %in% harvard, "Harvard", paste(precip$Site.Name)))#
summary(precip)#
#
precip2 <- aggregate(precip[,3:ncol(precip)], by=precip[,c("Site.Name", "Year")], FUN=mean)#
summary(precip2)#
#
precip2$grow.seas <- rowSums(precip2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
precip2$pfall <- rowMeans(precip2[,c("pSep", "pOct", "pNov")])#
precip2$winter <- rowMeans(precip2[,c("pDec", "Jan", "Feb")])#
precip2$spring <- rowMeans(precip2[,c("Mar", "Apr", "May")])#
precip2$summer <- rowMeans(precip2[,c("Jun", "Jul", "Aug")])#
summary(precip2)#
write.csv(precip2, file="processed_data/ch2_precip.csv", row.names=F)#
#####################################################
# making a file with just the growing season data#
#####################################################
climate.use <- data.frame(Site = t.mean2$Site.Name,#
						  tmean = t.mean2$grow.seas,#
						  precip = precip2$grow.seas,#
						  Year = t.mean2$Year)#
summary(climate.use)#
#
write.csv(climate.use, file="processed_data/climate_growing_season.csv", row.names=F)						  #
#####################################################
# Combining my data.use from script #1 to this set of climate data#
#####################################################
#
data.use <- read.csv("processed_data/tree_data_use.csv", header=T)#
summary(data.use)#
dim(data.use)#
summary(climate.use)#
dim(climate.use)#
#
unique(data.use$Site)#
unique(climate.use$Site)#
#
data.use2 <- merge(data.use, climate.use, all.x=T, all.y=T)#
dim(data.use2)#
summary(data.use2)#
#
# taking onlt the trees that dated so that we don't have any gapfilled data in the analysis#
data.use2 <- data.use2[data.use2$Dated=="Y" & !is.na(data.use2$Dated),]#
summary(data.use2)#
#
write.csv(data.use2, file="processed_data/AllSites_tree_plus_climate.csv", row.names=F)#
#####################################################
# Making a data frame that has months and seasons broken down so we can determine the critical climate period for each site#
#####################################################
summary(t.mean2)#
summary(precip2)#
#
# Minimum temp#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.min$Site.Name <- as.factor(ifelse(t.min$Site.Name %in% harvard, "Harvard", paste(t.min$Site.Name)))#
summary(t.min)#
t.min2 <- aggregate(t.min[,3:ncol(t.min)], by=t.min[,c("Site.Name", "Year")], FUN=mean)#
# summary(t.min2)#
#
t.min2$grow.seas <- rowMeans(t.min2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
t.min2$pfall <- rowMeans(t.min2[,c("pSep", "pOct", "pNov")])#
t.min2$winter <- rowMeans(t.min2[,c("pDec", "Jan", "Feb")])#
t.min2$spring <- rowMeans(t.min2[,c("Mar", "Apr", "May")])#
t.min2$summer <- rowMeans(t.min2[,c("Jun", "Jul", "Aug")])#
summary(t.min2)#
write.csv(t.min2, file="processed_data/ch2_tmin.csv", row.names=F)#
#
# Maximum temp#
#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.max$Site.Name <- as.factor(ifelse(t.max$Site.Name %in% harvard, "Harvard", paste(t.max$Site.Name)))#
summary(t.max)#
#
t.max2 <- aggregate(t.max[,3:ncol(t.max)], by=t.max[,c("Site.Name", "Year")], FUN=mean)#
# summary(t.max2)#
#
t.max2$grow.seas <- rowMeans(t.max2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
t.max2$pfall <- rowMeans(t.max2[,c("pSep", "pOct", "pNov")])#
t.max2$winter <- rowMeans(t.max2[,c("pDec", "Jan", "Feb")])#
t.max2$spring <- rowMeans(t.max2[,c("Mar", "Apr", "May")])#
t.max2$summer <- rowMeans(t.max2[,c("Jun", "Jul", "Aug")])#
write.csv(t.max2, file="processed_data/ch2_tmax.csv", row.names=F)
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)#
summary(data.use)#
#
# Calculating basal area increment to use as our response variable#
# first lets calcualte basal area#
#
data.use$BA <- pi*(data.use$dbh.recon/2)^2#
#
for(t in unique(data.use$TreeID)){#
	# if(min(data.use[data.use$TreeID, "BA"], na.rm=T))#
	if(length(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"])<=1) next # skip things that don't have more than 1 year#
	for(y in min(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"]) : (max(data.use[data.use$TreeID==t & !is.na(data.use$BA),"Year"])-1) ){#
		data.use[data.use$TreeID==t & data.use$Year==y,"BA.inc"] <- data.use[data.use$TreeID==t & data.use$Year==y+1,"BA"] -#
		 					data.use[data.use$TreeID==t & data.use$Year==y,"BA"]		#
	}#
}
# Calculating BAI for the DOE sites#
#
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)#
summary(data.use)
data.use <- read.csv("processed_data/tree_data_use.csv", header=T)
summary(data.use)
summary(data.use)
dbh.recon <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_Allsites_may2016_updateGapFilling_DBHrecon_ALL.csv", header=T, row.names=1)#
write.csv(dbh.recon, file="processed_data/dbh_recon.csv", row.names=F)
summary(dbh.recon)
summary(dbh.recon)#
row.names(dbh.recon)#
dbh.recon.stack <- stack(dbh.recon)#
summary(dbh.recon.stack)#
names(dbh.recon.stack) <- c("dbh.recon", "TreeID")#
dbh.recon.stack$Year <- as.numeric(paste(row.names(dbh.recon)))#
summary(tree.rw)
data.use <- merge(tree.rw, dbh.recon.stack, all.x=T, all.y=F)
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
##################################################################################################
# Loading up .csv file that has meta data and RWL files for ring widths#
# Also doing some housekeeping (unit conversions, name formats) up front to make the workflow smoother#
##################################################################################################
#
#load in core details data sheet.  Has living/dead, pith info, measurement info.#
#loading the dplR to use the basal area reconstruction functions.#
core.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_core_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*", " "), header=T)#
summary(core.data)#
write.csv(core.data, file="processed_data/core_data.csv", row.names=F)#
#
#importing the diameter files of all trees sampled: includes tree id, spp, plot assignment, and DBH #
tree.data <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_tree_data_may2016_update.csv", na.strings=c("", "NA", "#VALUE!", "*"), header=T)#
#
write.csv(tree.data, file="processed_data/tree_data.csv", row.names=F)#
#
summary(tree.data)#
###################################################################
# Importing ring widths#
###################################################################
# Load in Ross DOE ring widths from the east#
# importing ring widths of dated samples #
#
tree.rw <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_AllSites_may2016_Gapfilled.csv", header=T)#
#
write.csv(tree.rw, file="processed_data/tree_rw.csv", row.names=F)#
#
summary(tree.rw)#
#
###################################################################
# Getting dbh reconstruction#
###################################################################
#
dbh.recon <- read.csv("~/PhD/Carbon Research/Calloc_TreeRingNPP/processed_data/DOE_Allsites_may2016_updateGapFilling_DBHrecon_ALL.csv", header=T, row.names=1)#
write.csv(dbh.recon, file="processed_data/dbh_recon.csv", row.names=F)#
#
summary(dbh.recon)#
row.names(dbh.recon)#
dbh.recon.stack <- stack(dbh.recon)#
summary(dbh.recon.stack)#
names(dbh.recon.stack) <- c("dbh.recon", "TreeID")#
dbh.recon.stack$Year <- as.numeric(paste(row.names(dbh.recon)))#
summary(tree.rw)
data.use <- merge(tree.rw, dbh.recon.stack, all.x=T, all.y=F) #
summary(data.use)
write.csv(data.use, "processed_data/tree_data_use.csv", row.names=F)
library(car)#
library(dplR)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
#
# Loading in climate data from the PRISM extracts#
t.mean <- read.csv("climate_data/prism_met_sites_wide_tmean.csv", header=T)#
precip <- read.csv("climate_data/prism_met_sites_wide_ppt.csv", header=T)#
t.min <- read.csv("climate_data/prism_met_sites_wide_tmin.csv", header=T)#
t.max <- read.csv("climate_data/prism_met_sites_wide_tmax.csv", header=T)#
summary(t.mean)#
#
# We have Harvard P1 and Harvard P2 as separate sites#
#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.mean$Site.Name <- as.factor(ifelse(t.mean$Site.Name %in% harvard, "Harvard", paste(t.mean$Site.Name)))#
summary(t.mean)#
#
t.mean2 <- aggregate(t.mean[,3:ncol(t.mean)], by=t.mean[,c("Site.Name", "Year")], FUN=mean)#
# summary(t.mean2)#
#
t.mean2$grow.seas <- rowMeans(t.mean2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
t.mean2$pfall <- rowMeans(t.mean2[,c("pSep", "pOct", "pNov")])#
t.mean2$winter <- rowMeans(t.mean2[,c("pDec", "Jan", "Feb")])#
t.mean2$spring <- rowMeans(t.mean2[,c("Mar", "Apr", "May")])#
t.mean2$summer <- rowMeans(t.mean2[,c("Jun", "Jul", "Aug")])#
summary(t.mean2)#
write.csv(t.mean2, file="processed_data/ch2_tmean.csv", row.names=F)#
#
# Precip#
precip$Site.Name <- as.factor(ifelse(precip$Site.Name %in% harvard, "Harvard", paste(precip$Site.Name)))#
summary(precip)#
#
precip2 <- aggregate(precip[,3:ncol(precip)], by=precip[,c("Site.Name", "Year")], FUN=mean)#
summary(precip2)#
#
precip2$grow.seas <- rowSums(precip2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
precip2$pfall <- rowMeans(precip2[,c("pSep", "pOct", "pNov")])#
precip2$winter <- rowMeans(precip2[,c("pDec", "Jan", "Feb")])#
precip2$spring <- rowMeans(precip2[,c("Mar", "Apr", "May")])#
precip2$summer <- rowMeans(precip2[,c("Jun", "Jul", "Aug")])#
summary(precip2)#
write.csv(precip2, file="processed_data/ch2_precip.csv", row.names=F)#
#####################################################
# making a file with just the growing season data#
#####################################################
climate.use <- data.frame(Site = t.mean2$Site.Name,#
						  tmean = t.mean2$grow.seas,#
						  precip = precip2$grow.seas,#
						  Year = t.mean2$Year)#
summary(climate.use)#
#
write.csv(climate.use, file="processed_data/climate_growing_season.csv", row.names=F)
data.use <- read.csv("processed_data/tree_data_use.csv", header=T)
summary(data.use)
dim(data.use)#
summary(climate.use)#
dim(climate.use)#
#
unique(data.use$Site)#
unique(climate.use$Site)
data.use2 <- merge(data.use, climate.use, all.x=T, all.y=T)
dim(data.use2)
summary(data.use2)
# taking onlt the trees that dated so that we don't have any gapfilled data in the analysis#
data.use2 <- data.use2[data.use2$Dated=="Y" & !is.na(data.use2$Dated),]#
summary(data.use2)#
#
write.csv(data.use2, file="processed_data/AllSites_tree_plus_climate.csv", row.names=F)#
#####################################################
# Making a data frame that has months and seasons broken down so we can determine the critical climate period for each site#
#####################################################
summary(t.mean2)#
summary(precip2)#
#
# Minimum temp#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.min$Site.Name <- as.factor(ifelse(t.min$Site.Name %in% harvard, "Harvard", paste(t.min$Site.Name)))#
summary(t.min)#
t.min2 <- aggregate(t.min[,3:ncol(t.min)], by=t.min[,c("Site.Name", "Year")], FUN=mean)#
# summary(t.min2)#
#
t.min2$grow.seas <- rowMeans(t.min2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
t.min2$pfall <- rowMeans(t.min2[,c("pSep", "pOct", "pNov")])#
t.min2$winter <- rowMeans(t.min2[,c("pDec", "Jan", "Feb")])#
t.min2$spring <- rowMeans(t.min2[,c("Mar", "Apr", "May")])#
t.min2$summer <- rowMeans(t.min2[,c("Jun", "Jul", "Aug")])#
summary(t.min2)#
write.csv(t.min2, file="processed_data/ch2_tmin.csv", row.names=F)#
#
# Maximum temp#
#
harvard <- c("Harvard Forest (Tower Plot 1)", "Harvard Forest (Tower Plot 2)")#
#
t.max$Site.Name <- as.factor(ifelse(t.max$Site.Name %in% harvard, "Harvard", paste(t.max$Site.Name)))#
summary(t.max)#
#
t.max2 <- aggregate(t.max[,3:ncol(t.max)], by=t.max[,c("Site.Name", "Year")], FUN=mean)#
# summary(t.max2)#
#
t.max2$grow.seas <- rowMeans(t.max2[,c("May", "Jun", "Jul", "Aug", "Sep")])#
t.max2$pfall <- rowMeans(t.max2[,c("pSep", "pOct", "pNov")])#
t.max2$winter <- rowMeans(t.max2[,c("pDec", "Jan", "Feb")])#
t.max2$spring <- rowMeans(t.max2[,c("Mar", "Apr", "May")])#
t.max2$summer <- rowMeans(t.max2[,c("Jun", "Jul", "Aug")])#
write.csv(t.max2, file="processed_data/ch2_tmax.csv", row.names=F)
rm(list=ls())
data.use <- read.csv("processed_data/AllSites_tree_plus_climate.csv", header=T)
summary(data.use)
data.use$BA <- pi*(data.use$dbh.recon/2)^2#
#
for(t in unique(data.use$TreeID)){#
	# if(min(data.use[data.use$TreeID, "BA"], na.rm=T))#
	if(length(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"])<=1) next # skip things that don't have more than 1 year#
	for(y in min(data.use[data.use$TreeID==t & !is.na(data.use$BA), "Year"]) : (max(data.use[data.use$TreeID==t & !is.na(data.use$BA),"Year"])-1) ){#
		data.use[data.use$TreeID==t & data.use$Year==y,"BA.inc"] <- data.use[data.use$TreeID==t & data.use$Year==y+1,"BA"] -#
		 					data.use[data.use$TreeID==t & data.use$Year==y,"BA"]		#
	}#
}
